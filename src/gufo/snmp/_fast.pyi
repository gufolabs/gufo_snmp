from typing import Optional, List, Dict, Any

SnmpMessage = Any

class SNMPError(Exception): ...
class SNMPEncodeError(SNMPError): ...
class SNMPDecodeError(SNMPError): ...

class GetNextIter(object):
    def __init__(self, oid: str): ...

class SnmpClientSocket(object):
    def __init__(
        self,
        addr: str,
        community: str,
        version: int,
        tos: int,
        send_buffer_size: int,
        recv_buffer_size: int,
    ): ...
    def get_fd(self) -> int: ...
    def send_get(self, oid: str) -> None: ...
    def send_get_many(self, oids: List[str]) -> None: ...
    def send_getnext(self, iter: GetNextIter) -> None: ...
    def recv_getresponse(self) -> Any: ...
    def recv_getresponse_many(self) -> Dict[str, Any]: ...
    def recv_getresponse_next(self, iter: GetNextIter) -> Any: ...

class SnmpListenSocket(object):
    def __init__(
        self, addr: str, port: int, community: Optional[str]
    ) -> None: ...
    def get_fd(self) -> int: ...
    def set_recv_buffer_size(self, size: int) -> None: ...
    def recv(self) -> Optional[List[SnmpMessage]]: ...
