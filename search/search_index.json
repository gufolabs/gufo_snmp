{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Gufo SNMP is the accelerated Python SNMP client library supporting both async and synchronous mode. It consists of a clean Python API for high-efficient BER parser and socket IO, implemented in the  Rust language with PyO3 wrapper.</p> <p>The querying of the single MIB key is a simple task:</p> <pre><code>from gufo.snmp import SnmpSession\n\nasync with SnmpSession(addr=\"127.0.0.1\", community=\"public\") as session:\n    r = await session.get(\"1.3.6.1.2.1.1.3.0\")\n</code></pre> <p>And the blocking mode shares virtually the same API:</p> <pre><code>from gufo.snmp.sync_client import SnmpSession\n\nwith SnmpSession(addr=\"127.0.0.1\", community=\"public\") as session:\n    r = session.get(\"1.3.6.1.2.1.1.3.0\")\n</code></pre> <p>Multiple keys can be queried by one request too:</p> <pre><code>async with SnmpSession(addr=\"127.0.0.1\", community=\"public\") as session:\n    r = await session.get_many([\"1.3.6.1.2.1.1.3.0\", \"1.3.6.1.2.1.1.2.0\"])\n</code></pre> <p>The querying of the MIB parts is also available with GetNext request:</p> <pre><code>async with SnmpSession(addr=\"127.0.0.1\", community=\"public\") as session:\n    async for oid, value in  session.getnext(\"1.3.6.1.2.1.1\"):\n        ...\n</code></pre> <p>And with GetBulk request:</p> <pre><code>async with SnmpSession(addr=\"127.0.0.1\", community=\"public\") as session:\n    async for oid, value in  session.getbulk(\"1.3.6.1.2.1.1\"):\n        ...\n</code></pre> <p>The <code>.fetch()</code> method allows to choose between <code>.getnext()</code> and <code>.getbulk()</code> automatically: <pre><code>async with SnmpSession(addr=\"127.0.0.1\", community=\"public\") as session:\n    async for oid, value in  session.fetch(\"1.3.6.1.2.1.1\"):\n        ...\n</code></pre></p> <p>SNMPv3 shares same API and semantics:</p> <pre><code>async with SnmpSession(\n    addr=\"127.0.0.1\",\n    user=User(\n        \"user1\",\n        auth_key=Sha1Key(b\"12345678\"),\n        priv_key=Aes128Key(b\"87654321\")\n    )\n) as session:\n    r = await session.get(\"1.3.6.1.2.1.1.3.0\")\n</code></pre> <p>Gufo SNMP also allows to limit rate of outgoing requests to protect equipment from overloading:</p> <pre><code>async with SnmpSession(addr=\"127.0.0.1\", community=\"public\", limit_rps=10) as session:\n    async for oid, value in  session.fetch(\"1.3.6.1.2.1.1\"):\n        ...\n</code></pre> <p>Gufo SNMP offers various tools for developers, including a wrapper to run a local instance of SNMP daemon:</p> <pre><code>async with Snmpd(), SnmpSession(addr=\"127.0.0.1\", port=10161) as session:\n    r = await session.get(\"1.3.6.1.2.1.1.3.0\")\n</code></pre> <p>The <code>gufo-snmp</code> command-line utility, closely resembling the Net-SNMP tools, is also provided.</p> <pre><code>gufo-snmp -v2c -c public 127.0.0.1 1.3.6.1.2.1.1.6.0\n1.3.6.1.2.1.1.6.0 = Gufo SNMP Test\n</code></pre>"},{"location":"#features","title":"Features","text":"<ul> <li>Clean async and blocking API.</li> <li>SNMP v1/v2c/v3 support.</li> <li>SNMP v3 User Security Model:<ul> <li>Authentication: HMAC-MD5-96, HMAC-SHA-96.</li> <li>Privacy: DES, AES128.</li> <li>Engine ID discovery.</li> </ul> </li> <li>Command-line utility which resembles Net-SNMP's get* commands.</li> <li>High-performance.</li> <li>Built with security in mind.</li> <li>Zero-copy BER parsing.</li> <li>Query rate limiting.</li> <li>Full Python typing support.</li> <li>Editor completion.</li> <li>Well-tested, battle-proven code.</li> <li>Thoroughly check compatibility with various network equipment.</li> </ul>"},{"location":"#further-roadmap","title":"Further Roadmap","text":"<ul> <li>SHA2 family of hashes.</li> <li>AES256 encryption.</li> <li>SNMP Trap and Inform collector.</li> <li>Incorporation of the NOC's Compiled MIB infrastructure.</li> </ul>"},{"location":"#on-gufo-stack","title":"On Gufo Stack","text":"<p>This product is a part of Gufo Stack - the collaborative effort  led by Gufo Labs. Our goal is to create a robust and flexible  set of tools to create network management software and automate  routine administration tasks.</p> <p>To do this, we extract the key technologies that have proven themselves  in the NOC and bring them as separate packages. Then we work on API, performance tuning, documentation, and testing. The NOC uses the final result as the external dependencies.</p> <p>Gufo Stack makes the NOC better, and this is our primary task. But other products can benefit from Gufo Stack too. So we believe that our effort will make  the other network management products better.</p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p> <p>To see unreleased changes, please see the CHANGELOG on the main branch guide.</p>"},{"location":"CHANGELOG/#0100-2025-10-17","title":"0.10.0 - 2025-10-17","text":""},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li>Python 3.14 support.</li> <li>gufo-snmp command utility.</li> </ul>"},{"location":"CHANGELOG/#infrastructure","title":"Infrastructure","text":"<ul> <li>Use python:3.14-slim-trixie for devcontainer.</li> <li>devcontainer: Setup python tests.</li> <li>Ruff 0.14.0</li> <li>Mypy 1.18.2</li> <li>Pytest 8.4.2</li> <li>IPython 9.6.0</li> <li>Codecov integration.</li> <li>socket2 0.6</li> <li>nom 0.8</li> </ul>"},{"location":"CHANGELOG/#091-2025-09-23","title":"0.9.1 - 2025-09-23","text":""},{"location":"CHANGELOG/#fixed","title":"Fixed","text":"<ul> <li>MacOS wheels uploading</li> </ul>"},{"location":"CHANGELOG/#090-2025-09-23","title":"0.9.0 - 2025-09-23","text":""},{"location":"CHANGELOG/#added_1","title":"Added","text":"<ul> <li>MacOS ARM64 binary wheels.</li> </ul>"},{"location":"CHANGELOG/#security","title":"Security","text":"<ul> <li>Install security updates during devcontainer build.</li> <li>Use python:3.13-slim-trixie as base for devcontainer.</li> </ul>"},{"location":"CHANGELOG/#infrastructure_1","title":"Infrastructure","text":"<ul> <li>Rust 1.90.0</li> <li>PyO3 0.26</li> <li>Codecov integration.</li> </ul>"},{"location":"CHANGELOG/#084-2025-08-29","title":"0.8.4 - 2025-08-29","text":""},{"location":"CHANGELOG/#infrastructure_2","title":"Infrastructure","text":"<ul> <li>Move dependencies to pyproject.toml</li> </ul>"},{"location":"CHANGELOG/#083-2025-07-21","title":"0.8.3 - 2025-07-21","text":""},{"location":"CHANGELOG/#changed","title":"Changed","text":"<ul> <li>SNMPv3: Always set REPORT flag for improved compatibility with wierd implementations.</li> </ul>"},{"location":"CHANGELOG/#082-2025-07-21","title":"0.8.2 - 2025-07-21","text":""},{"location":"CHANGELOG/#fixed_1","title":"Fixed","text":"<ul> <li>Bug-per-bug compatibility with Net-SNMP: Fill encryption padding with padding length.</li> </ul>"},{"location":"CHANGELOG/#081-2025-07-18","title":"0.8.1 - 2025-07-18","text":""},{"location":"CHANGELOG/#fixed_2","title":"Fixed","text":"<ul> <li>Fixed DES privacy padding in SNMP v3.</li> </ul>"},{"location":"CHANGELOG/#080-2025-04-15","title":"0.8.0 - 2025-04-15","text":""},{"location":"CHANGELOG/#added_2","title":"Added","text":"<ul> <li>Benchmarks.</li> <li>Enable PGO on productive builds.</li> </ul>"},{"location":"CHANGELOG/#changed_1","title":"Changed","text":"<ul> <li>Change OID internal format, reduce memory allocations.</li> <li>Optimized internal ObjectId processing.</li> </ul>"},{"location":"CHANGELOG/#infrastructure_3","title":"Infrastructure","text":"<ul> <li>Ruff 0.11.2</li> <li>Rust 1.86.0</li> <li>PyO3 0.24</li> <li>mkdocs-material 9.6.11</li> </ul>"},{"location":"CHANGELOG/#071-2025-03-23","title":"0.7.1 - 2025-03-23","text":""},{"location":"CHANGELOG/#added_3","title":"Added","text":"<ul> <li>LTO is switched on.</li> </ul>"},{"location":"CHANGELOG/#fixed_3","title":"Fixed","text":""},{"location":"CHANGELOG/#17-fix-premature-end-of-getbulk","title":"17: Fix premature end of getbulk.","text":""},{"location":"CHANGELOG/#070-2025-03-05","title":"0.7.0 - 2025-03-05","text":""},{"location":"CHANGELOG/#added_4","title":"Added","text":"<ul> <li>Musl and ARM64 binary wheels</li> </ul>"},{"location":"CHANGELOG/#changed_2","title":"Changed","text":"<ul> <li>Massive internals refactoring caused by moving to a new PyO3 API.</li> </ul>"},{"location":"CHANGELOG/#infrastructure_4","title":"Infrastructure","text":"<ul> <li>Rust 1.85.0</li> <li>Rust edition 2024</li> <li>PyO3 0.23</li> </ul>"},{"location":"CHANGELOG/#060-2024-11-06","title":"0.6.0 - 2024-11-06","text":""},{"location":"CHANGELOG/#fixed_4","title":"Fixed","text":"<ul> <li>Fix #16: SNMPv3 requests not works with Mikrotik RouterOS devices.</li> <li>Fix #15: sync client not releasing Python GIL on blocking operations.</li> </ul>"},{"location":"CHANGELOG/#added_5","title":"Added","text":"<ul> <li>Python 3.13 binary wheels.</li> </ul>"},{"location":"CHANGELOG/#changed_3","title":"Changed","text":"<ul> <li>Dropping support of Python 3.8</li> <li>Massive refactoring of internals to support PyO3 0.22 and to remove duplicated code.</li> <li>Use reusable buffers pool insead of allocating buffer along with each socket.</li> </ul>"},{"location":"CHANGELOG/#infrastructure_5","title":"Infrastructure","text":"<ul> <li>Rust 1.82.0</li> <li>mypy 1.13.0</li> <li>Ruff 0.7.2</li> <li>pytest 8.3.3</li> <li>coverage 7.6.4</li> <li>mkdocs-material 9.5.44</li> <li>Black formatter replaced by Ruff.</li> </ul>"},{"location":"CHANGELOG/#052-2024-07-30","title":"0.5.2 - 2024-07-30","text":""},{"location":"CHANGELOG/#added_6","title":"Added","text":"<ul> <li><code>SnmpAuthError</code> is exposed to <code>gufo.snmp</code> root module.</li> </ul>"},{"location":"CHANGELOG/#infrastructure_6","title":"Infrastructure","text":"<ul> <li>Rust 1.80.0</li> </ul>"},{"location":"CHANGELOG/#051-2024-02-28","title":"0.5.1 - 2024-02-28","text":""},{"location":"CHANGELOG/#added_7","title":"Added","text":"<ul> <li>Pack rust benchmarks into sdist.</li> </ul>"},{"location":"CHANGELOG/#infrastructure_7","title":"Infrastructure","text":"<ul> <li>Rust 1.76.0</li> <li>Remove <code>setup.py</code> file.</li> </ul>"},{"location":"CHANGELOG/#050-2024-02-02","title":"0.5.0 - 2024-02-02","text":""},{"location":"CHANGELOG/#added_8","title":"Added","text":"<ul> <li>Synchronous SNMP client.</li> <li><code>Snmpd</code>: <code>verbose</code> option.</li> </ul>"},{"location":"CHANGELOG/#changed_4","title":"Changed","text":"<ul> <li>Improved password to master key translation performance: ~35%.</li> <li>Optimized SNMPv3 message signing.</li> <li>Examples split to sync and async versions.</li> </ul>"},{"location":"CHANGELOG/#fixed_5","title":"Fixed","text":"<ul> <li>Default key type for auth keys set to Password.</li> </ul>"},{"location":"CHANGELOG/#040-2024-01-29","title":"0.4.0 - 2024-01-29","text":""},{"location":"CHANGELOG/#added_9","title":"Added","text":"<ul> <li>SNMP v3 support.</li> <li>Snmpd.engine_id property.</li> <li>Tests for all SNMP versions.</li> </ul>"},{"location":"CHANGELOG/#030-2024-01-10","title":"0.3.0 - 2024-01-10","text":""},{"location":"CHANGELOG/#added_10","title":"Added","text":"<ul> <li>Python 3.12 builds</li> <li>Optimized performance (measured L.A. reduction in 1.5 times)</li> </ul>"},{"location":"CHANGELOG/#changed_5","title":"Changed","text":"<ul> <li>docs: Fancy front page</li> <li>Build on GLibc 2.28 rather than on 2.24</li> </ul>"},{"location":"CHANGELOG/#infrastructure_8","title":"Infrastructure","text":"<ul> <li>devcontainer: Move <code>settings</code> to the <code>customisations.vscode.settings</code></li> <li>docs: mkdocs-material 9.2.3</li> <li>Rust 1.75.0</li> <li>PyO3 0.20</li> <li>socket2 0.5</li> <li>devcontainer: Use Python 3.12</li> </ul>"},{"location":"CHANGELOG/#020-2023-02-27","title":"0.2.0 - 2023-02-27","text":""},{"location":"CHANGELOG/#added_11","title":"Added","text":"<ul> <li>docs: Benchmarks</li> <li>SnmpSession <code>policer</code> and <code>limit_rps</code> parameters   for query rate limiting.</li> </ul>"},{"location":"CHANGELOG/#changed_6","title":"Changed","text":"<ul> <li> <p>Improve BER decoder performance:</p> </li> <li> <p>BER Header: ~18%</p> </li> <li>Typical Get Response: ~25%</li> <li>Object Identifier: ~46%</li> </ul>"},{"location":"CHANGELOG/#infrastructure_9","title":"Infrastructure","text":"<ul> <li>Iai benchmarks</li> <li><code>fmt-iai.py</code> tool</li> </ul>"},{"location":"CHANGELOG/#011-2023-02-17","title":"0.1.1 - 2023-02-17","text":""},{"location":"CHANGELOG/#fixed_6","title":"Fixed","text":"<ul> <li>Fix SnmpSession allow_bulk handling.</li> <li>Fix #1: Getting FileNotFoundError exception if multiple instances   of SnmpSession were previously used.</li> </ul>"},{"location":"CHANGELOG/#infrastructure_10","title":"Infrastructure","text":"<ul> <li>Rust 1.67.1</li> <li>Ruff 0.0.246</li> <li>Criterion Benchmarks</li> </ul>"},{"location":"CHANGELOG/#010-2023-02-02","title":"0.1.0 - 2023-02-02","text":""},{"location":"CHANGELOG/#added_12","title":"Added","text":"<ul> <li>Initial implementation</li> </ul>"},{"location":"LICENSE/","title":"License","text":"<p>Copyright \u00a9 2023-2025, Gufo Labs. All rights reserved.</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <ol> <li>Redistributions of source code must retain the above copyright notice,    this list of conditions and the following disclaimer.</li> <li>Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the    documentation and/or other materials provided with the distribution.</li> <li>Neither the name of Gufo Labs nor the names of its contributors may be used    to endorse or promote products derived from this software without    specific prior written permission.</li> </ol> <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>"},{"location":"faq/","title":"FAQ","text":"<pre><code>What is \"Gufo\"?\n</code></pre> <p>Gufo means the Owl in Italian.</p> <pre><code>Why the owls?\n</code></pre> <p>We love owls and the viable parts of our technologies were proven at the project, named \"the Owl\".</p> <pre><code>What is \"Gufo Labs\"?\n</code></pre> <p>Gufo Labs is the Milan-based company specialized on network and IT consulting, and on software research.</p> <pre><code>What is \"Gufo Stack\"?\n</code></pre> <p>We've extracted core components behind the NOC  and released them as independent packages, available under the terms  of the 3-clause BSD license. Our software shares common code quality standards  and is battle-proven under the high load. We hope our key components will help  the engineers and the developers to build reliable networks and robust network  management software.  See more for details.</p>"},{"location":"installation/","title":"Installation","text":"<p>Install with the pip</p> <pre><code>$ pip install gufo_snmp\n</code></pre>"},{"location":"installation/#checking-the-installation","title":"Checking the Installation","text":"<p>To check the installation just import the module</p> <pre><code>from gufo.snmp import __version__\n</code></pre>"},{"location":"installation/#upgrading","title":"Upgrading","text":"<p>To upgrade existing Gufo SNMP installation use pip</p> <pre><code>$ pip install --upgrade gufo_snmp\n</code></pre>"},{"location":"installation/#uninstalling","title":"Uninstalling","text":"<p>To uninstall Gufo SNMP use pip</p> <pre><code>$ pip uninstall gufo_snmp\n</code></pre>"},{"location":"benchmarks/","title":"Python SNMP Clients Benchmarks","text":"<p>Disclaimer</p> <p>All following information is provided only for reference. These tests are performed by Gufo Labs to estimate the performance of Gufo SNMP against major competitors, so they cannot be considered independent and unbiased.</p> <p>Note</p> <p>Although performance is an absolute requirement for Gufo Stack, other factors such as maturity, community, features, examples, and existing code base should also be considered.</p> <p>This benchmark evaluates several Python SNMP client libraries:</p> Library Version Description Stars SyncMode AsyncMode SNMPv3 Gufo SNMP 0.8.0 An accelerated Python SNMP client pysnmp 7.1.17 pure-Python SNMP client easysnmp 0.2.6 Net-SNMP Python bindings <p>The evaluation covers the following aspects:</p> <ul> <li>Performance in synchronous (blocking) mode, if supported.</li> <li>Performance in asynchronous (non-blocking) mode, if supported.</li> <li>Performance in plain-text SNMP (v2c) and encrypted (SNMP v3) modes.</li> <li>Ability to release GIL in multi-threaded applications.</li> </ul> <p>All benchmarks are performed against a local Net-SNMPd installation using wrapper, provided by <code>gufo.snmp.snmpd</code>.</p> <p>The benchmarking environment utilizes an docker container running on Apple M4 Pro processor.</p>"},{"location":"benchmarks/#benchmark-results","title":"Benchmark Results","text":"<ul> <li>Preparing</li> <li>SNMP v2c</li> <li>SNMP v3</li> <li>Conclustions</li> <li>Feedback</li> </ul>"},{"location":"benchmarks/SUMMARY/","title":"SUMMARY","text":"<ul> <li>Overview</li> <li>Preparing</li> <li>SNMP v2c</li> <li>SNMP v3</li> <li>Conclusions</li> <li>Feedback</li> </ul>"},{"location":"benchmarks/conclusions/","title":"Conclusions","text":"<p>Here is the summary table for Gufo SNMP bencmarks.</p> Test Sync (ms) Async (ms) Asyncoverhead SNMPv2c GETNEXT 215.17 273.66 27.18% SNMPv2c GETBULK 46.62 52.56 12.75% SNMPv2c GETNEXT (x4) 357.34 487.52 36.43% SNMPv2c GETBULK (x4) 155.51 185.20 19.09% SNMPv3 GETNEXT 242.40 289.18 19.30% SNMPv3 GETBULK 49.45 55.80 12.84% SNMPv3 GETNEXT (x4) 409.16 582.81 42.44% SNMPv3 GETBULK (x4) 12.77 20.42 59.89% <p>Conclusions:</p> <ul> <li>Gufo SNMP is the clear winner in terms of performance.  </li> <li>Async mode adds significant overhead to each I/O operation (~30%).   This is especially noticeable in GETNEXT mode. We have to address this issue in future releases.</li> <li>GETBULK consistently outperforms GETNEXT. As expected, it delivers better performance and should be preferred whenever supported by the equipment.  </li> <li>The encryption overhead of SNMPv3 (AES128 + SHA1) is minimal, with little impact on overall performance.  </li> <li>Gufo SNMP demonstrates good scalability: running four parallel tasks takes only about 1.5\u00d7 the time of a single task, indicating efficient performance even beyond Python\u2019s GIL limitations.  </li> <li>BER parsing is a complex algorithmic operation, so native CPU implementations provide significant performance gains.  </li> <li>Purpose-tailored BER parsers that map directly to Python types offer substantial advantages over generic SNMP implementations.  </li> <li>Complex abstractions are slow. A lean and efficient API is key to high performance.</li> <li>Wrappers over C-libraries may demonstrate an unexpected behaviour in multi-threaded applications.</li> </ul>"},{"location":"benchmarks/feedback/","title":"Feedback","text":""},{"location":"benchmarks/feedback/#feedback","title":"Feedback","text":"<p>If you have any ideas, comment, or thoughts on benchmark suite, feel free to discuss it on GitHub.</p>"},{"location":"benchmarks/preparing/","title":"Preparing","text":"<p>Install local Net-SNMPd:</p> <pre><code>./tools/build/setup-snmpd.sh\n</code></pre> <p>Install system packages:</p> RHEL/CentOSDebian/Ubuntu <pre><code>sudo yum install net-snmp-devel\n</code></pre> <pre><code>sudo apt-get install libsnmp-dev\n</code></pre> <p>Install dependencies: <pre><code>pip install -e gufo-snmp[test,bench]\n</code></pre></p>"},{"location":"benchmarks/v2c/","title":"Overview","text":"<p>SNMP v2c uses plaintext, non-encrypted BER-encoded messages with simple, community-based authorization.</p> <p>This benchmark suite evaluates the following aspects of SNMP v2c operations:</p> <ul> <li>GETNEXT \u2014 Sequential iteration over the entire MIB using   the GETNEXT operation.</li> <li>GETBULK \u2014 Sequential iteration over the entire MIB   using the GETBULK operation.</li> <li>GETNEXT (Parallel) \u2014 Four parallel sessions performing   sequential iteration over the entire MIB using the GETNEXT operation.</li> <li>GETBULK (Parallel) \u2014 Four parallel sessions performing   sequential iteration over the entire MIB using the GETBULK operation.</li> </ul>"},{"location":"benchmarks/v2c/SUMMARY/","title":"SUMMARY","text":"<ul> <li>Overview</li> <li>GETNEXT</li> <li>GETBULK</li> <li>Parallel GETNEXT</li> <li>Parallel GETBULK</li> </ul>"},{"location":"benchmarks/v2c/getbulk/","title":"GETBULK","text":"<p>Perform SNMP v2c GETBULK requests to iterate through whole MIB. This test evaluates:</p> <ul> <li>The efficiency of the network stack.</li> <li>The efficiency of BER encoder and decoder.</li> <li>The efficiency of the BER-to-Python data types mapping.</li> </ul> <p>Look at the source code for details.</p> <p>Notes</p> <ul> <li>easysnmp doesn't supports async mode</li> </ul> <p>Run tests:</p> <pre><code>pytest benchmarks/test_v2c_getbulk.py\n</code></pre> <p>Results (lower is better)</p> <pre><code>============================= test session starts ==============================\nplatform linux -- Python 3.13.2, pytest-8.3.3, pluggy-1.5.0\nbenchmark: 5.1.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=50 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /workspaces/gufo_snmp\nconfigfile: pyproject.toml\nplugins: benchmark-5.1.0\ncollected 4 items\n\nbenchmarks/test_v2c_getbulk.py ....                                      [100%]\n\n\n------------------------------------------------------------------------------------ benchmark: 4 tests ------------------------------------------------------------------------------------\nName (time in ms)             Min                 Max                Mean            StdDev              Median               IQR            Outliers      OPS            Rounds  Iterations\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\ntest_gufo_snmp_sync       37.9863 (1.0)       74.4578 (1.25)      45.3796 (1.0)      5.5611 (2.73)      46.6150 (1.0)      7.1543 (7.34)         12;1  22.0364 (1.0)          50           1\ntest_gufo_snmp_async      46.0101 (1.21)      59.4995 (1.0)       52.9366 (1.17)     2.0354 (1.0)       52.5597 (1.13)     0.9750 (1.0)           8;8  18.8905 (0.86)         50           1\ntest_easysnmp_sync        49.8938 (1.31)      73.9654 (1.24)      67.1123 (1.48)     3.2053 (1.57)      66.7074 (1.43)     1.4055 (1.44)          6;9  14.9004 (0.68)         50           1\ntest_pysnmp_async        573.2397 (15.09)    596.9186 (10.03)    583.6291 (12.86)    5.6439 (2.77)     583.4234 (12.52)    7.8223 (8.02)         17;0   1.7134 (0.08)         50           1\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nLegend:\n  Outliers: 1 Standard Deviation from Mean; 1.5 IQR (InterQuartile Range) from 1st Quartile and 3rd Quartile.\n  OPS: Operations Per Second, computed as 1 / Mean\n============================== 4 passed in 40.01s ==============================\n</code></pre> <p> Lower is better</p>"},{"location":"benchmarks/v2c/getbulk_p/","title":"Parallel GETBULK","text":"<p>Perform SNMP v2c GETBULK requests to iterate through whole MIB with concurrency of 4 maintaining single client session per thread/coroutine.</p> <ul> <li>The efficiency of the network stack.</li> <li>The efficiency of BER encoder and decoder.</li> <li>The efficiency of the BER-to-Python data types mapping.</li> <li>Granularity of the internal locks.</li> <li>Ability to release GIL when runnning native code.</li> </ul> <p>Look at the source code for details.</p> <p>Notes</p> <ul> <li>easysnmp doesn't supports async mode.</li> <li>easysnmp causes almost constant SEGFAULTs, so we were forced to turn off appropriate test.</li> </ul> <p>Run tests:</p> <pre><code>pytest benchmarks/test_v2c_p4_getnext.py\n</code></pre> <p>Results (lower is better)</p> <pre><code>============================= test session starts ==============================\nplatform linux -- Python 3.13.2, pytest-8.3.3, pluggy-1.5.0\nbenchmark: 5.1.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=50 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /workspaces/gufo_snmp\nconfigfile: pyproject.toml\nplugins: benchmark-5.1.0\ncollected 3 items\n\nbenchmarks/test_v2c_p4_getbulk.py ...                                    [100%]\n\n\n----------------------------------------------------------------------------------------- benchmark: 3 tests ----------------------------------------------------------------------------------------\nName (time in ms)               Min                   Max                  Mean             StdDev                Median                IQR            Outliers     OPS            Rounds  Iterations\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\ntest_gufo_snmp_sync        150.5068 (1.0)        161.4152 (1.0)        155.5240 (1.0)       1.7776 (1.0)        155.5074 (1.0)       1.8687 (1.0)          10;2  6.4299 (1.0)          50           1\ntest_gufo_snmp_async       171.8042 (1.14)       193.7454 (1.20)       184.5445 (1.19)      3.9756 (2.24)       185.2006 (1.19)      3.8316 (2.05)         12;4  5.4187 (0.84)         50           1\ntest_pysnmp_async        2,203.8696 (14.64)    2,304.7855 (14.28)    2,242.9824 (14.42)    22.8359 (12.85)    2,237.4564 (14.39)    31.9016 (17.07)        12;0  0.4458 (0.07)         50           1\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nLegend:\n  Outliers: 1 Standard Deviation from Mean; 1.5 IQR (InterQuartile Range) from 1st Quartile and 3rd Quartile.\n  OPS: Operations Per Second, computed as 1 / Mean\n======================== 3 passed in 135.41s (0:02:15) =========================\n</code></pre> <p> Lower is better</p>"},{"location":"benchmarks/v2c/getnext/","title":"GETNEXT","text":"<p>Perform SNMP v2c GETNEXT requests to iterate through whole MIB. This test evaluates:</p> <ul> <li>The efficiency of the network stack.</li> <li>The efficiency of BER encoder and decoder.</li> <li>The efficiency of the BER-to-Python data types mapping.</li> </ul> <p>Look at the source code for details.</p> <p>Notes</p> <ul> <li>easysnmp doesn't supports async mode</li> </ul> <p>Run tests:</p> <pre><code>pytest benchmarks/test_v2c_getnext.py\n</code></pre> <p>Results (lower is better)</p> <pre><code>============================= test session starts ==============================\nplatform linux -- Python 3.13.2, pytest-8.3.3, pluggy-1.5.0\nbenchmark: 5.1.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=50 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /workspaces/gufo_snmp\nconfigfile: pyproject.toml\nplugins: benchmark-5.1.0\ncollected 4 items\n\nbenchmarks/test_v2c_getnext.py ....                                      [100%]\n\n\n----------------------------------------------------------------------------------------- benchmark: 4 tests ----------------------------------------------------------------------------------------\nName (time in ms)               Min                   Max                  Mean             StdDev                Median                IQR            Outliers     OPS            Rounds  Iterations\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\ntest_gufo_snmp_sync        193.4025 (1.0)        235.6148 (1.0)        214.8392 (1.0)       7.4111 (1.08)       215.1661 (1.0)       7.7423 (1.30)         13;2  4.6546 (1.0)          50           1\ntest_easysnmp_sync         230.7012 (1.19)       269.1656 (1.14)       256.6668 (1.19)      6.8638 (1.0)        257.1268 (1.20)      8.2020 (1.38)          8;2  3.8961 (0.84)         50           1\ntest_gufo_snmp_async       236.3053 (1.22)       289.3099 (1.23)       271.9603 (1.27)      9.3496 (1.36)       273.6588 (1.27)      5.9558 (1.0)          10;7  3.6770 (0.79)         50           1\ntest_pysnmp_async        1,437.8537 (7.43)     1,596.1364 (6.77)     1,487.5666 (6.92)     36.1268 (5.26)     1,479.2526 (6.87)     31.4574 (5.28)         10;6  0.6722 (0.14)         50           1\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nLegend:\n  Outliers: 1 Standard Deviation from Mean; 1.5 IQR (InterQuartile Range) from 1st Quartile and 3rd Quartile.\n  OPS: Operations Per Second, computed as 1 / Mean\n======================== 4 passed in 117.12s (0:01:57) =========================\n</code></pre> <p> Lower is better</p>"},{"location":"benchmarks/v2c/getnext_p/","title":"Parallel GETNEXT","text":"<p>Perform SNMP v2c GETNEXT requests to iterate through whole MIB with concurrency of 4 maintaining single client session per thread/coroutine.</p> <ul> <li>The efficiency of the network stack.</li> <li>The efficiency of BER encoder and decoder.</li> <li>The efficiency of the BER-to-Python data types mapping.</li> <li>Granularity of the internal locks.</li> <li>Ability to release GIL when runnning native code.</li> </ul> <p>Look at the source code for details.</p> <p>Notes</p> <ul> <li>easysnmp doesn't supports async mode.</li> <li>easysnmp causes almost constant SEGFAULTs, so we were forced to turn off appropriate test.</li> </ul> <p>Run tests:</p> <pre><code>pytest benchmarks/test_v2c_p4_getnext.py\n</code></pre> <p>Results (lower is better)</p> <pre><code>============================= test session starts ==============================\nplatform linux -- Python 3.13.2, pytest-8.3.3, pluggy-1.5.0\nbenchmark: 5.1.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=50 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /workspaces/gufo_snmp\nconfigfile: pyproject.toml\nplugins: benchmark-5.1.0\ncollected 3 items\n\nbenchmarks/test_v2c_p4_getnext.py ...                                    [100%]\n\n\n----------------------------------------------------------------------------------------- benchmark: 3 tests ----------------------------------------------------------------------------------------\nName (time in ms)               Min                   Max                  Mean             StdDev                Median                IQR            Outliers     OPS            Rounds  Iterations\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\ntest_gufo_snmp_sync        345.9976 (1.0)        369.1155 (1.0)        357.0097 (1.0)       4.3024 (1.0)        357.3423 (1.0)       5.1624 (1.0)          16;2  2.8010 (1.0)          50           1\ntest_gufo_snmp_async       413.7641 (1.20)       519.0843 (1.41)       480.6624 (1.35)     21.4717 (4.99)       487.5226 (1.36)      8.5229 (1.65)          8;9  2.0805 (0.74)         50           1\ntest_pysnmp_async        5,549.9992 (16.04)    5,821.7834 (15.77)    5,670.1119 (15.88)    50.9505 (11.84)    5,668.7624 (15.86)    54.0314 (10.47)        12;3  0.1764 (0.06)         50           1\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nLegend:\n  Outliers: 1 Standard Deviation from Mean; 1.5 IQR (InterQuartile Range) from 1st Quartile and 3rd Quartile.\n  OPS: Operations Per Second, computed as 1 / Mean\n======================== 3 passed in 339.49s (0:05:39) =========================\n</code></pre> <p> Lower is better</p>"},{"location":"benchmarks/v3/","title":"Overview","text":"<p>SNMP v3 introduces the following operation modes:</p> <ul> <li>Plaintext \u2014 Matches SNMP v2c but introduces a User Security Model (USM).</li> <li>Integrity Protection \u2014 Protects messages from tampering using a hash-based signature.</li> <li>Privacy Protection \u2014 Encrypts messages to ensure confidentiality.</li> </ul> <p>This benchmark suite focuses on the efficiency of cryptographic operations using AES-128 and SHA-1 modes, and evaluates the following aspects of SNMP v3 operations:</p> <ul> <li>GETNEXT \u2014 Sequential iteration over the entire MIB using   the GETNEXT operation.</li> <li>GETBULK \u2014 Sequential iteration over the entire MIB   using the GETBULK operation.</li> <li>GETNEXT (Parallel) \u2014 Four parallel sessions performing   sequential iteration over the entire MIB using the GETNEXT operation.</li> <li>GETBULK (Parallel) \u2014 Four parallel sessions performing   sequential iteration over the entire MIB using the GETBULK operation.</li> </ul>"},{"location":"benchmarks/v3/SUMMARY/","title":"SUMMARY","text":"<ul> <li>Overview</li> <li>GETNEXT</li> <li>GETBULK</li> <li>Parallel GETNEXT</li> <li>Parallel GETBULK</li> </ul>"},{"location":"benchmarks/v3/getbulk/","title":"GETBULK","text":"<p>Perform SNMP v3 GETBULK requests to iterate through whole MIB. Use SHA-1 hasing and AES-128 encryption. This test evaluates:</p> <ul> <li>The efficiency of the network stack.</li> <li>The efficiency of BER encoder and decoder.</li> <li>The efficiency of the BER-to-Python data types mapping.</li> <li>The efficiency of the crypto stack.</li> </ul> <p>Look at the source code for details.</p> <p>Notes</p> <ul> <li>easysnmp doesn't supports async mode</li> </ul> <p>Run tests:</p> <pre><code>pytest benchmarks/test_v3_getbulk.py\n</code></pre> <p>Results (lower is better)</p> <pre><code>============================= test session starts ==============================\nplatform linux -- Python 3.13.2, pytest-8.3.3, pluggy-1.5.0\nbenchmark: 5.1.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=50 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /workspaces/gufo_snmp\nconfigfile: pyproject.toml\nplugins: benchmark-5.1.0\ncollected 3 items\n\nbenchmarks/test_v3_getbulk.py ...                                        [100%]\n\n=============================== warnings summary ===============================\nbenchmarks/test_v3_getbulk.py: 1248 warnings\n  /usr/local/lib/python3.13/site-packages/pysnmp/smi/mibs/SNMPv2-SMI.py:1259: DeprecationWarning: isFixedLength is deprecated. Please use is_fixed_length instead.\n    if impliedFlag or obj.isFixedLength():\n\nbenchmarks/test_v3_getbulk.py: 2808 warnings\n  /usr/local/lib/python3.13/site-packages/pysnmp/smi/mibs/SNMPv2-SMI.py:1231: DeprecationWarning: isFixedLength is deprecated. Please use is_fixed_length instead.\n    elif obj.isFixedLength():\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n\n------------------------------------------------------------------------------------ benchmark: 3 tests ------------------------------------------------------------------------------------\nName (time in ms)             Min                 Max                Mean            StdDev              Median               IQR            Outliers      OPS            Rounds  Iterations\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\ntest_gufo_snmp_sync       41.6209 (1.0)       52.5063 (1.0)       48.3213 (1.0)      3.2135 (1.69)      49.4517 (1.0)      3.1033 (2.40)         15;7  20.6948 (1.0)          50           1\ntest_gufo_snmp_async      50.4980 (1.21)      59.5947 (1.13)      55.8961 (1.16)     1.8984 (1.0)       55.8032 (1.13)     1.2932 (1.0)         14;11  17.8904 (0.86)         50           1\ntest_pysnmp_async        635.4062 (15.27)    665.9244 (12.68)    647.6706 (13.40)    5.6292 (2.97)     647.6818 (13.10)    6.8157 (5.27)         15;1   1.5440 (0.07)         50           1\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nLegend:\n  Outliers: 1 Standard Deviation from Mean; 1.5 IQR (InterQuartile Range) from 1st Quartile and 3rd Quartile.\n  OPS: Operations Per Second, computed as 1 / Mean\n====================== 3 passed, 4056 warnings in 40.18s =======================\n</code></pre> <p> Lower is better</p>"},{"location":"benchmarks/v3/getbulk_p/","title":"Parallel GETBULK","text":"<p>Perform SNMP v3 GETBULK requests to iterate through whole MIB with concurrency of 4 maintaining single client session per thread/coroutine. Use SHA-1 hasing and AES-128 encryption. This test evaluates:</p> <ul> <li>The efficiency of the network stack.</li> <li>The efficiency of BER encoder and decoder.</li> <li>The efficiency of the BER-to-Python data types mapping.</li> <li>Granularity of the internal locks.</li> <li>Ability to release GIL when runnning native code.</li> </ul> <p>Look at the source code for details.</p> <p>Notes</p> <ul> <li>easysnmp doesn't supports async mode</li> </ul> <p>Run tests:</p> <pre><code>pytest benchmarks/test_v3_p4_getbulk.py\n</code></pre> <p>Results (lower is better)</p> <pre><code>============================= test session starts ==============================\nplatform linux -- Python 3.13.2, pytest-8.3.3, pluggy-1.5.0\nbenchmark: 5.1.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=50 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /workspaces/gufo_snmp\nconfigfile: pyproject.toml\nplugins: benchmark-5.1.0\ncollected 3 items\n\nbenchmarks/test_v3_p4_getbulk.py ...                                     [100%]\n\n=============================== warnings summary ===============================\nbenchmarks/test_v3_p4_getbulk.py: 4992 warnings\n  /usr/local/lib/python3.13/site-packages/pysnmp/smi/mibs/SNMPv2-SMI.py:1259: DeprecationWarning: isFixedLength is deprecated. Please use is_fixed_length instead.\n    if impliedFlag or obj.isFixedLength():\n\nbenchmarks/test_v3_p4_getbulk.py: 11232 warnings\n  /usr/local/lib/python3.13/site-packages/pysnmp/smi/mibs/SNMPv2-SMI.py:1231: DeprecationWarning: isFixedLength is deprecated. Please use is_fixed_length instead.\n    elif obj.isFixedLength():\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n\n----------------------------------------------------------------------------------------- benchmark: 3 tests -----------------------------------------------------------------------------------------\nName (time in ms)               Min                   Max                  Mean             StdDev                Median                IQR            Outliers      OPS            Rounds  Iterations\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\ntest_gufo_snmp_sync         12.1797 (1.0)         14.0205 (1.0)         12.8193 (1.0)       0.3110 (1.0)         12.7744 (1.0)       0.3250 (1.0)          10;2  78.0076 (1.0)          50           1\ntest_gufo_snmp_async        14.9465 (1.23)        23.0973 (1.65)        20.0516 (1.56)      1.4909 (4.79)        20.4244 (1.60)      1.0378 (3.19)          8;7  49.8714 (0.64)         64           1\ntest_pysnmp_async        2,363.2356 (194.03)   2,457.3349 (175.27)   2,401.9015 (187.37)   21.7204 (69.83)    2,399.1742 (187.81)   27.6077 (84.96)        19;1   0.4163 (0.01)         50           1\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nLegend:\n  Outliers: 1 Standard Deviation from Mean; 1.5 IQR (InterQuartile Range) from 1st Quartile and 3rd Quartile.\n  OPS: Operations Per Second, computed as 1 / Mean\n================ 3 passed, 16224 warnings in 128.03s (0:02:08) =================\n</code></pre> <p> Lower is better</p>"},{"location":"benchmarks/v3/getnext/","title":"GETNEXT","text":"<p>Perform SNMP v3 GETNEXT requests to iterate through whole MIB. Use SHA-1 hasing and AES-128 encryption. This test evaluates:</p> <ul> <li>The efficiency of the network stack.</li> <li>The efficiency of BER encoder and decoder.</li> <li>The efficiency of the BER-to-Python data types mapping.</li> <li>The efficiency of the crypto stack.</li> </ul> <p>Look at the source code for details.</p> <p>Notes</p> <ul> <li>easysnmp doesn't supports async mode</li> </ul> <p>Run tests:</p> <pre><code>pytest benchmarks/test_v3_getnext.py\n</code></pre> <p>Results (lower is better)</p> <pre><code>--8&lt;-- \"docs/benchmarks/v3/.txt\"test_v3_getnext\n</code></pre> <p> Lower is better</p>"},{"location":"benchmarks/v3/getnext_p/","title":"Parallel GETNEXT","text":"<p>Perform SNMP v2c GETNEXT requests to iterate through whole MIB with concurrency of 4 maintaining single client session per thread/coroutine. Use SHA-1 hasing and AES-128 encryption. This test evaluates:</p> <ul> <li>The efficiency of the network stack.</li> <li>The efficiency of BER encoder and decoder.</li> <li>The efficiency of the BER-to-Python data types mapping.</li> <li>Granularity of the internal locks.</li> <li>Ability to release GIL when runnning native code.</li> </ul> <p>Look at the source code for details.</p> <p>Notes</p> <ul> <li>easysnmp doesn't supports async mode</li> </ul> <p>Run tests:</p> <pre><code>pytest benchmarks/test_v3_p4_getnext.py\n</code></pre> <p>Results (lower is better)</p> <pre><code>============================= test session starts ==============================\nplatform linux -- Python 3.13.2, pytest-8.3.3, pluggy-1.5.0\nbenchmark: 5.1.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=50 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /workspaces/gufo_snmp\nconfigfile: pyproject.toml\nplugins: benchmark-5.1.0\ncollected 3 items\n\nbenchmarks/test_v3_p4_getnext.py ...                                     [100%]\n\n=============================== warnings summary ===============================\nbenchmarks/test_v3_p4_getnext.py: 4992 warnings\n  /usr/local/lib/python3.13/site-packages/pysnmp/smi/mibs/SNMPv2-SMI.py:1259: DeprecationWarning: isFixedLength is deprecated. Please use is_fixed_length instead.\n    if impliedFlag or obj.isFixedLength():\n\nbenchmarks/test_v3_p4_getnext.py: 11232 warnings\n  /usr/local/lib/python3.13/site-packages/pysnmp/smi/mibs/SNMPv2-SMI.py:1231: DeprecationWarning: isFixedLength is deprecated. Please use is_fixed_length instead.\n    elif obj.isFixedLength():\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n\n------------------------------------------------------------------------------------------ benchmark: 3 tests -----------------------------------------------------------------------------------------\nName (time in ms)               Min                   Max                  Mean              StdDev                Median                 IQR            Outliers     OPS            Rounds  Iterations\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\ntest_gufo_snmp_sync        397.5008 (1.0)        425.5758 (1.0)        409.9564 (1.0)        5.3523 (1.0)        409.1588 (1.0)        6.7810 (1.0)           9;1  2.4393 (1.0)          50           1\ntest_gufo_snmp_async       518.4271 (1.30)       628.2227 (1.48)       580.2550 (1.42)      19.0326 (3.56)       582.8090 (1.42)      11.6073 (1.71)          8;6  1.7234 (0.71)         50           1\ntest_pysnmp_async        9,061.7766 (22.80)    9,520.1535 (22.37)    9,221.8081 (22.49)    112.1348 (20.95)    9,180.9126 (22.44)    143.2068 (21.12)        14;1  0.1084 (0.04)         50           1\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nLegend:\n  Outliers: 1 Standard Deviation from Mean; 1.5 IQR (InterQuartile Range) from 1st Quartile and 3rd Quartile.\n  OPS: Operations Per Second, computed as 1 / Mean\n================ 3 passed, 16224 warnings in 532.31s (0:08:52) =================\n</code></pre> <p> Lower is better</p>"},{"location":"dev/","title":"Gufo SNMP: Developer's Guide","text":"<p>This section is intended for Gufo SNMP developers and for entities,  including both individuals and companies, interested in contributing to the project.</p> <ul> <li>Developer's Environment</li> <li>Building and Testing</li> <li>Common Tasks</li> <li>Code Quality</li> <li>Code Base</li> <li>Contributing Guide</li> <li>Code of Conduct</li> <li>Supported Standards</li> <li>Supported BER Types</li> </ul>"},{"location":"dev/CODE_OF_CONDUCT/","title":"Gufo Stack Code of Conduct","text":"<p>Gufo Stack are the tools built by people for people. We aim to create a respectful, collaborative, and constructive community where everyone can contribute to building better software.</p>"},{"location":"dev/CODE_OF_CONDUCT/#the-rule","title":"The Rule","text":"<p>\u201cAnd as you wish that others would do to you, do so to them.\u201d</p> <p>-- Luke 6:31</p>"},{"location":"dev/CODE_OF_CONDUCT/#the-note","title":"The Note","text":"<p>This principle is universal. Similar wisdom can be found in many traditions:</p> <ul> <li>Confucius: \u201cDo not impose on others what you do not wish for yourself.\u201d (Analects 15:24)</li> <li>Prophet Muhammad (peace be upon him): \u201cNone of you [truly] believes until he loves for his brother what he loves for himself.\u201d (Hadith, Sahih Muslim 45:71)</li> </ul> <p>That\u2019s all.</p>"},{"location":"dev/CONTRIBUTING/","title":"Types of contributions","text":"<p>You can contribute to the Gufo Labs projects in several way. This repo is a place to discuss and collaborate on GitHub! Our team is maintaining this repo to preserve our bandwidth, off topic conversations will be closed.</p>"},{"location":"dev/CONTRIBUTING/#discussions","title":"Discussions","text":"<p>Discussions are where we have conversations.</p> <p>If you'd like help troubleshooting a PR you're working on, have a great new idea, or want to share something amazing you've learned in our docs, join us in discussions.</p>"},{"location":"dev/CONTRIBUTING/#issues","title":"Issues","text":"<p>Issues are used to track tasks that contributors can help with. </p> <p>If you've found bug, or something in the content of the documentation that should be updated, search open issues to see if someone else has reported the same thing. If it's something new, open an issue. We'll use the issue to have a conversation about the problem you want to fix.</p>"},{"location":"dev/CONTRIBUTING/#pull-requests","title":"Pull requests","text":"<p>A pull request is a way to suggest changes in our repository.</p>"},{"location":"dev/codebase/","title":"Project's Code Base","text":"<p>The code base of the project has following structure:</p> <ul> <li><code>.devcontainer/</code> - Developer's container configuration for    VSCode Remote Containers. Just reopen   project in remote container to get ready-to-development   environment.</li> <li> <p><code>.github/</code> - GitHub settings</p> <ul> <li><code>workflows/</code> - GitHub Actions Workflows settings.   Used to run tests and build the documentation.</li> </ul> </li> <li> <p><code>docs/</code> - Mkdocs documentation.</p> </li> <li><code>examples/</code> - Project's examples.</li> <li><code>src/</code> - Project's source code.</li> <li><code>tests/</code> - Project's Pytest test suite.</li> <li><code>.gitignore</code> - Gitignore file.</li> <li><code>Dockerfile</code> - Dockerfile for development container.</li> <li><code>mkdocs.yml</code> - Mkdocs configuration file.</li> <li><code>pyproject.toml</code> - pyproject.toml file for python tools configuration.</li> </ul>"},{"location":"dev/codequality/","title":"Code Quality Guide","text":"<p>We share the common code quality standards between all Gufo Labs projects.</p>"},{"location":"dev/codequality/#python-code-formatting","title":"Python Code Formatting","text":"<p>All Python code must be formatting using Ruff code formatter with settings defined in the project's <code>pyproject.toml</code> file.</p>"},{"location":"dev/codequality/#python-code-linting","title":"Python Code Linting","text":"<p>All Python code must pass ruff tests with the project's settings.</p>"},{"location":"dev/codequality/#python-code-static-checks","title":"Python Code Static Checks","text":"<p>All python code must pass Mypy type checks in the <code>strict</code> mode.</p>"},{"location":"dev/codequality/#test-suite-coverage","title":"Test Suite Coverage","text":"<p>The test suite must provide 100% code coverage whenever possible.</p>"},{"location":"dev/codequality/#documentation-standards","title":"Documentation Standards","text":"<ul> <li>Documentation must be clean and mean.</li> </ul>"},{"location":"dev/common/","title":"Developer's Common  Tasks","text":""},{"location":"dev/common/#bump-version","title":"Bump Version","text":"<ul> <li> Change <code>__version__</code> in <code>src/gufo/snmp/__init__.py</code></li> <li> Change <code>[package]/version</code> in <code>Cargo.toml</code></li> <li> Add section in <code>CHANGELOG.md</code></li> </ul>"},{"location":"dev/common/#bump-rust-version","title":"Bump Rust Version","text":"<ul> <li> Change <code>RUST_VERSION</code> in <code>tools/build/setup-rust.sh</code></li> </ul>"},{"location":"dev/common/#bump-pyo3-version","title":"Bump pyo3 version","text":"<ul> <li> Change <code>[dependencies]/pyo3</code> in <code>Cargo.toml</code></li> </ul>"},{"location":"dev/environment/","title":"Developer's Environment","text":"<p>To participate in development you need to prepare the developer's environment first. Depending on the preferable tools, your mileage may vary.</p>"},{"location":"dev/environment/#visual-studio-code-dev-container","title":"Visual Studio Code Dev Container","text":"<p>The easiest way to start the development is to use Visual Studio Code with Remote Containers plugin. Just click on the green sign in the lower-left corner and select the \"Reopen in Container\" menu item. You'll get all the required formatting and linting settings out of the box.</p>"},{"location":"dev/standards/","title":"Supported Standards","text":"<p>Gufo SNMP implements and is guided by the following standards:</p>"},{"location":"dev/standards/#ietf-rfc","title":"IETF RFC","text":"<ul> <li>RFC-1157: A Simple Network Management Protocol (SNMP).</li> <li>RFC-1441: Introduction to version 2 of the Internet-standard Network Management Framework.</li> <li>RFC-1442: Structure of Management Information for version 2 of the Simple Network Management Protocol (SNMPv2).</li> <li>RFC-1905: Protocol Operations for Version 2 of the Simple Network Management Protocol (SNMPv2) </li> <li>RFC-2578: Structure of Management Information Version 2 (SMIv2).</li> <li>RFC-3411: An Architecture for Describing Simple Network Management Protocol (SNMP) Management Frameworks.</li> <li>RFC-3412: Message Processing and Dispatching for the Simple Network Management Protocol (SNMP)</li> <li>RFC-3414: User-based Security Model (USM) for version 3 of the Simple Network Management Protocol (SNMPv3)</li> <li>RFC-3826: The Advanced Encryption Standard (AES) Cipher Algorithm in the SNMP User-based Security Model</li> </ul>"},{"location":"dev/standards/#itu-t","title":"ITU-T","text":"<ul> <li>X-690: Information technology \u2013 ASN.1 encoding rules: Specification of Basic Encoding Rules (BER), Canonical Encoding Rules (CER) and Distinguished Encoding Rules (DER).</li> </ul>"},{"location":"dev/standards/#python-pep","title":"Python PEP","text":"<ul> <li>PEP8: Style Guide for Python Code.</li> <li>PEP484: Type Hints</li> <li>PEP561: Distributing and Packaging Type Information.</li> </ul>"},{"location":"dev/testing/","title":"Building and Testing","text":"<p>Before starting building and testing package set up  Developer's Environment first. From here and below we consider the shell's current directory matches the project's root directory.</p>"},{"location":"dev/testing/#building-package","title":"Building Package","text":"<p>To test the package build run:</p> <pre><code>python -m build --sdist --wheel\n</code></pre> <p>Compiled packages will be available in the <code>dist/</code> directory.</p>"},{"location":"dev/testing/#running-tests","title":"Running tests","text":"<p>Rebuild rust modules, if changed:</p> <pre><code>python -m pip install --editable .\n</code></pre> <p>To run the test suit:</p> <pre><code>pytest -vv\n</code></pre>"},{"location":"dev/testing/#running-lints","title":"Running Lints","text":"<p>All lints are checked as part of GitHub Actions Workflow. You may run lints manually before committing to the project.</p>"},{"location":"dev/testing/#check-formatting","title":"Check Formatting","text":"<p>Python Code Formatting is the mandatory requirement in our Code Quality standards. To check code formatting run:</p> <pre><code>ruff format --check examples/ src/ tests/\n</code></pre> <p>To fix formatting errors run: <pre><code>ruff format examples/ src/ tests/\n</code></pre></p> <p>We recommend setting python code formatting on file saving (Done in VS Code Dev Container out of the box).</p>"},{"location":"dev/testing/#python-code-lints","title":"Python Code Lints","text":"<p>Python Code Linting is the mandatory requirement in our Code Quality standards. To check code for linting errors run:</p> <pre><code>ruff src/ tests/\n</code></pre>"},{"location":"dev/testing/#python-code-static-checks","title":"Python Code Static Checks","text":"<p>Python Code Static Checks is the mandatory requirement in our Code Quality standards. To check code for typing errors run:</p> <pre><code>mypy src/\n</code></pre>"},{"location":"dev/testing/#python-test-code-coverage-check","title":"Python Test Code Coverage Check","text":"<p>To evaluate code coverage run tests:</p> <pre><code>coverage run -m pytest -vv\n</code></pre> <p>To report the coverage after the test run:</p> <pre><code>coverage report\n</code></pre> <p>To show line-by-line coverage:</p> <pre><code>coverage html\n</code></pre> <p>Then open <code>dist/coverage/index.html</code> file in your browser.</p>"},{"location":"dev/testing/#building-documentation","title":"Building Documentation","text":"<p>To rebuild and check documentation run</p> <pre><code>mkdocs serve\n</code></pre> <p>We recommend using Grammarly service to check documentation for common errors.</p>"},{"location":"dev/testing/#benchmarks","title":"Benchmarks","text":"<p>First, edit <code>Cargo.toml</code>, comment line in the section <code>[lib]</code>:</p> <pre><code>crate-type = [\"cdylib\"] # Comment for bench\n</code></pre> <p>and uncomment</p> <pre><code># crate-type = [\"cdylib\", \"rlib\"] # Uncomment for bench\n</code></pre> <p>Then run bencmarks:</p> <pre><code>cargo bench\n</code></pre> <p>Revert <code>Cargo.toml</code> when you completed.</p>"},{"location":"dev/types/","title":"Supported BER Types","text":"<p>Gufo SNMP implements minimalistic X.690 BER encoder/decoder. It focuses only on types and convenctions really used in SNMP protocol.</p> <p>The currently supported types are:</p> Type Class P/C<sup>1</sup> Tag Python Type Reference BOOLEAN Universal P 1 bool X.690 pp 8.1 INTEGER Universal P 2 int X.690 pp 8.2 BITSTRING Universal P/C 3 X.690 pp 8.6 OCTETSTRING Universal P 4 bytes X.690 pp 8.7 NULL Universal P 5 X.690 pp 8.8 OBJECT IDENTIFIER Universal P 6 str X.690 pp 8.19 OBJECT DESCRIPTOR Universal P/C 7 bytes EXTERNAL Universal P 8 X.690 pp 8.18 REAL Universal P 9 float X.690 pp 8.5 ENUMERATED Universal P 10 RELATIVE OID Universal P 13 str X.690 pp 8.20 SEQUENCE Universal C 16 <sup>2</sup> X.690 pp 8.9 IpAddress Application P 0 str RFC-1442 pp 7.1.5 Counter32 Application P 1 int RFC-1442 pp 7.1.6 Gauge32 Application P 2 int RFC-1442 pp 7.1.7 TimeTicks Application P 3 int RFC-1442 pp 7.1.8 Opaque Application P 4 bytes RFC-1442 pp 7.1.9 NsapAddress Application P 5 RFC-1442 pp 7.1.10 Counter64 Application P 6 int RFC-1442 pp 7.1.11 UInteger32 Application P 7 int RFC-1442 pp 7.1.12 noSuchObject Context P 0 <sup>3</sup> RFC-1905 pp 3 noSuchInstance Context P 1 <sup>3</sup> RFC-1905 pp 3 endOfMibView Context P 2 <sup>2</sup> RFC-1905 pp 3 <ol> <li> <p>Primitive/Constructed\u00a0\u21a9</p> </li> <li> <p>Handled internally, never exposed\u00a0\u21a9\u21a9</p> </li> <li> <p>Handled internally, raises NoSuchInstance or ignored.\u00a0\u21a9\u21a9</p> </li> </ol>"},{"location":"examples/","title":"Gufo SNMP: Examples","text":"<p>This part of the documentation contains a detailed explanation of the samples from the examples/ folder.</p> <ul> <li>sync: Synchronous mode.</li> <li>async: Asynchronous mode.</li> </ul>"},{"location":"examples/async/","title":"Gufo SNMP Examples: Async Mode","text":"<p>This part of the documentation contains a detailed explanation of the samples from the examples/async/ folder.</p> <ul> <li>get.py: Single Get Request</li> <li>getmany.py: Multi Items Get Request</li> <li>getnext.py: GetNext Request</li> <li>getbulk.py: GetBulk Request</li> <li>fetch.py: Fetch</li> <li>get-v3.py: SNMPv3 Get Request.</li> <li>engine-id-discovery.py: SNMPv3 Engine ID Discovery</li> <li>debugging.py: Debugging</li> </ul>"},{"location":"examples/async/debugging/","title":"Gufo SNMP Example: Debugging","text":"<p>In our previous examples we have relied on existing and running SNMP agent. But Gufo SNMP offers the useful <code>Snmpd</code> wrapper to configure and run the local instance of the <code>snmpd</code> which can be started and terminated along your application.</p> <p>Note</p> <p>This feature in requires an installed Net-SNMP package. Refer to your operation system's manuals for details.</p> debugging.py<pre><code>import asyncio\n\nfrom gufo.snmp import SnmpSession\nfrom gufo.snmp.snmpd import Snmpd\n\n\nasync def main() -&gt; None:\n    async with Snmpd(), SnmpSession(addr=\"127.0.0.1\", port=10161) as session:\n        async for oid, value in session.getnext(\"1.3.6.1.2.1.1\"):\n            print(f\"{oid}: {value}\")\n\n\nasyncio.run(main())\n</code></pre> <p>Let's see the details.</p> <p>debugging.py<pre><code>import asyncio\n\nfrom gufo.snmp import SnmpSession\nfrom gufo.snmp.snmpd import Snmpd\n\n\nasync def main() -&gt; None:\n    async with Snmpd(), SnmpSession(addr=\"127.0.0.1\", port=10161) as session:\n        async for oid, value in session.getnext(\"1.3.6.1.2.1.1\"):\n            print(f\"{oid}: {value}\")\n\n\nasyncio.run(main())\n</code></pre> Gufo SNMP is an async library. In our case we should run the client from our synchronous script, so we need to import <code>asyncio</code> to use <code>asyncio.run()</code>.</p> debugging.py<pre><code>import asyncio\n\nfrom gufo.snmp import SnmpSession\nfrom gufo.snmp.snmpd import Snmpd\n\n\nasync def main() -&gt; None:\n    async with Snmpd(), SnmpSession(addr=\"127.0.0.1\", port=10161) as session:\n        async for oid, value in session.getnext(\"1.3.6.1.2.1.1\"):\n            print(f\"{oid}: {value}\")\n\n\nasyncio.run(main())\n</code></pre> <p><code>SnmpSession</code> object holds all necessary API, so import it from <code>gufo.snmp</code>.</p> debugging.py<pre><code>import asyncio\n\nfrom gufo.snmp import SnmpSession\nfrom gufo.snmp.snmpd import Snmpd\n\n\nasync def main() -&gt; None:\n    async with Snmpd(), SnmpSession(addr=\"127.0.0.1\", port=10161) as session:\n        async for oid, value in session.getnext(\"1.3.6.1.2.1.1\"):\n            print(f\"{oid}: {value}\")\n\n\nasyncio.run(main())\n</code></pre> <p><code>Snmpd</code> wrapper should be imported from <code>gufo.snmp.snmpd</code> directly.</p> debugging.py<pre><code>import asyncio\n\nfrom gufo.snmp import SnmpSession\nfrom gufo.snmp.snmpd import Snmpd\n\n\nasync def main() -&gt; None:\n    async with Snmpd(), SnmpSession(addr=\"127.0.0.1\", port=10161) as session:\n        async for oid, value in session.getnext(\"1.3.6.1.2.1.1\"):\n            print(f\"{oid}: {value}\")\n\n\nasyncio.run(main())\n</code></pre> <p>Asynchronous code must be executed in the asynchronous functions or coroutines. So we define our function as <code>async</code>. Unlike our get, getmany, and getnext examples we do not expect any external arguments.</p> debugging.py<pre><code>import asyncio\n\nfrom gufo.snmp import SnmpSession\nfrom gufo.snmp.snmpd import Snmpd\n\n\nasync def main() -&gt; None:\n    async with Snmpd(), SnmpSession(addr=\"127.0.0.1\", port=10161) as session:\n        async for oid, value in session.getnext(\"1.3.6.1.2.1.1\"):\n            print(f\"{oid}: {value}\")\n\n\nasyncio.run(main())\n</code></pre> <p>We need to create <code>Snmpd</code> context to run local snmpd instance. Then we need to create <code>SnmpSession</code> object which wraps the client's session. Both context manager is asyncronous and can be used within single <code>async with</code> clause. Refer to the get, getmany, and getnext examples for additional details.</p> <p>Both <code>Snmpd</code> and <code>SnmpSession</code> are highly configurable, so refer to the Snmpd and SnmpSession references.</p> debugging.py<pre><code>import asyncio\n\nfrom gufo.snmp import SnmpSession\nfrom gufo.snmp.snmpd import Snmpd\n\n\nasync def main() -&gt; None:\n    async with Snmpd(), SnmpSession(addr=\"127.0.0.1\", port=10161) as session:\n        async for oid, value in session.getnext(\"1.3.6.1.2.1.1\"):\n            print(f\"{oid}: {value}\")\n\n\nasyncio.run(main())\n</code></pre> <p>We use <code>SnmpSession.getnext()</code> function to iterate within base OID. The function is an asynchronous iterator returning pairs of <code>(OID, value)</code>, so we use <code>async for</code> construction to iterate over the values. See SnmpSession.getnext() reference for further details. </p> debugging.py<pre><code>import asyncio\n\nfrom gufo.snmp import SnmpSession\nfrom gufo.snmp.snmpd import Snmpd\n\n\nasync def main() -&gt; None:\n    async with Snmpd(), SnmpSession(addr=\"127.0.0.1\", port=10161) as session:\n        async for oid, value in session.getnext(\"1.3.6.1.2.1.1\"):\n            print(f\"{oid}: {value}\")\n\n\nasyncio.run(main())\n</code></pre> <p>It is up to the application how to deal with the result. In our example we just print it.</p> debugging.py<pre><code>import asyncio\n\nfrom gufo.snmp import SnmpSession\nfrom gufo.snmp.snmpd import Snmpd\n\n\nasync def main() -&gt; None:\n    async with Snmpd(), SnmpSession(addr=\"127.0.0.1\", port=10161) as session:\n        async for oid, value in session.getnext(\"1.3.6.1.2.1.1\"):\n            print(f\"{oid}: {value}\")\n\n\nasyncio.run(main())\n</code></pre> <p>Lets run our asynchronous <code>main()</code> function via <code>asyncio.run</code>.</p>"},{"location":"examples/async/debugging/#running","title":"Running","text":"<p>Let's check our script. Run example as:</p> <pre><code>$ python3 examples/async/debugging.py\n1.3.6.1.2.1.1.1.0: b'Linux d280d3a0a307 5.15.49-linuxkit #1 SMP Tue Sep 13 07:51:46 UTC 2022 x86_64'\n1.3.6.1.2.1.1.2.0: 1.3.6.1.4.1.8072.3.2.10\n1.3.6.1.2.1.1.3.0: 36567296\n1.3.6.1.2.1.1.4.0: b'test &lt;test@example.com&gt;'\n1.3.6.1.2.1.1.5.0: b'd280d3a0a307'\n1.3.6.1.2.1.1.6.0: b'Gufo SNMP Test'\n1.3.6.1.2.1.1.7.0: 72\n...\n</code></pre>"},{"location":"examples/async/engine-id-discovery/","title":"SNMPv3 Engine ID Discovery","text":"<p>SNMP v3 introduces the concept of the Engine ID, a unique identifier for each SNMP agent  in the network.</p> <p>Gufo SNMP automatically performs Engine ID discovery as needed.  However, you can retrieve the actual value for various purposes,  such as inventory management or performance optimization,  and use it to skip the discovery step later.</p> engine-id-discovery.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession, User\n\n\nasync def main(addr: str, user_name: str) -&gt; None:\n    async with SnmpSession(addr=addr, user=User(user_name)) as session:\n        engine_id = session.get_engine_id()\n        print(engine_id.hex())\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2]))\n</code></pre> <p>Let's see the details.</p> engine-id-discovery.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession, User\n\n\nasync def main(addr: str, user_name: str) -&gt; None:\n    async with SnmpSession(addr=addr, user=User(user_name)) as session:\n        engine_id = session.get_engine_id()\n        print(engine_id.hex())\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2]))\n</code></pre> <p>Gufo SNMP is an async library. In our case we should run the client from our synchronous script, so we need to import <code>asyncio</code> to use <code>asyncio.run()</code>.</p> engine-id-discovery.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession, User\n\n\nasync def main(addr: str, user_name: str) -&gt; None:\n    async with SnmpSession(addr=addr, user=User(user_name)) as session:\n        engine_id = session.get_engine_id()\n        print(engine_id.hex())\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2]))\n</code></pre> <p>Import <code>sys</code> module to parse the CLI argument.</p> <p>Warning</p> <p>We use <code>sys.argv</code> only for demonstration purposes. Use <code>argsparse</code> or alternatives in real-world applications.</p> engine-id-discovery.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession, User\n\n\nasync def main(addr: str, user_name: str) -&gt; None:\n    async with SnmpSession(addr=addr, user=User(user_name)) as session:\n        engine_id = session.get_engine_id()\n        print(engine_id.hex())\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2]))\n</code></pre> <p><code>SnmpSession</code> object holds all necessary API, so import it from <code>gufo.snmp</code>. For SNMPv3 we also need an <code>User</code> class.</p> engine-id-discovery.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession, User\n\n\nasync def main(addr: str, user_name: str) -&gt; None:\n    async with SnmpSession(addr=addr, user=User(user_name)) as session:\n        engine_id = session.get_engine_id()\n        print(engine_id.hex())\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2]))\n</code></pre> <p>Asynchronous code must be executed in the asynchronous functions or coroutines. So we define our function as <code>async</code>. We expect the following arguments:</p> <ul> <li>Address of the agent.</li> <li>Valid user name.</li> </ul> engine-id-discovery.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession, User\n\n\nasync def main(addr: str, user_name: str) -&gt; None:\n    async with SnmpSession(addr=addr, user=User(user_name)) as session:\n        engine_id = session.get_engine_id()\n        print(engine_id.hex())\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2]))\n</code></pre> <p>First, we need to create <code>SnmpSession</code> object which wraps the client's session. The <code>SnmpSession</code> may be used as an instance directly or operated as async context manager with the <code>async with</code> clause. When used as a context manager, the client automatically closes all connections on the exit of context, so its lifetime is defined explicitly.</p> <p><code>SnmpSession</code> constructor offers lots of configuration variables for fine-tuning. Refer to the  SnmpSession reference for further details. In our example, we set the agent's address and create SNMPv3 user with default settings.</p> <p>Note</p> <p>To perform Engine ID discovery, the only mandatory parameter is the username.  Authentication and privacy settings can be left at their default values.</p> <p>engine-id-discovery.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession, User\n\n\nasync def main(addr: str, user_name: str) -&gt; None:\n    async with SnmpSession(addr=addr, user=User(user_name)) as session:\n        engine_id = session.get_engine_id()\n        print(engine_id.hex())\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2]))\n</code></pre> <code>SnmpSession.get_engine_id()</code> returns discovered Engine Id as bytes.</p> <p>engine-id-discovery.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession, User\n\n\nasync def main(addr: str, user_name: str) -&gt; None:\n    async with SnmpSession(addr=addr, user=User(user_name)) as session:\n        engine_id = session.get_engine_id()\n        print(engine_id.hex())\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2]))\n</code></pre> Now, we print the collected Engine ID. Since it is of bytes type,  we convert the output to hexadecimal form, which is commonly used  in network equipment configuration.</p> engine-id-discovery.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession, User\n\n\nasync def main(addr: str, user_name: str) -&gt; None:\n    async with SnmpSession(addr=addr, user=User(user_name)) as session:\n        engine_id = session.get_engine_id()\n        print(engine_id.hex())\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2]))\n</code></pre> <p>Lets run our asynchronous <code>main()</code> function via <code>asyncio.run</code> and pass first command-line parameters as address, community, and OID.</p>"},{"location":"examples/async/engine-id-discovery/#running","title":"Running","text":"<p>Let's check our script. Run example as:</p> <pre><code>$ python3 examples/async/engine-id-discovery.py 127.0.0.1 user1\n8000b85c03ec02732921c0\n</code></pre>"},{"location":"examples/async/fetch/","title":"Gufo SNMP Example: Fetch","text":"<p>We have mastered the iteration of the MIB view in our getnext and getbulk examples. Gufo SNMP also offers a convenient wrapper to combine them into the single <code>.fetch()</code> wrapper. This may be useful when the application combines SNMP v1 and SNMP v2c queries and it is desirable to hide such implementation details.</p> fetch.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(\n        addr=addr, community=community, allow_bulk=True\n    ) as session:\n        async for k, v in session.fetch(oid):\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> <p>Let's see the details.</p> <p>fetch.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(\n        addr=addr, community=community, allow_bulk=True\n    ) as session:\n        async for k, v in session.fetch(oid):\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> Gufo SNMP is an async library. In our case we should run the client from our synchronous script, so we need to import <code>asyncio</code> to use <code>asyncio.run()</code>.</p> <p>fetch.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(\n        addr=addr, community=community, allow_bulk=True\n    ) as session:\n        async for k, v in session.fetch(oid):\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> Import <code>sys</code> module to parse the CLI argument.</p> <p>Warning</p> <p>We use <code>sys.argv</code> only for demonstration purposes. Use <code>argsparse</code> or alternatives in real-world applications.</p> fetch.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(\n        addr=addr, community=community, allow_bulk=True\n    ) as session:\n        async for k, v in session.fetch(oid):\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> <p><code>SnmpSession</code> object holds all necessary API, so import it from <code>gufo.snmp</code>.</p> fetch.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(\n        addr=addr, community=community, allow_bulk=True\n    ) as session:\n        async for k, v in session.fetch(oid):\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> <p>Asynchronous code must be executed in the asynchronous functions or coroutines. So we define our function as <code>async</code>. We expect the following arguments:</p> <ul> <li>Address of the agent.</li> <li>SNMP community to authorize.</li> <li>Base OID to query.</li> </ul> fetch.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(\n        addr=addr, community=community, allow_bulk=True\n    ) as session:\n        async for k, v in session.fetch(oid):\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> <p>First, we need to create <code>SnmpSession</code> object which wraps the client's session. The <code>SnmpSession</code> may be used as an instance directly or operated as async context manager with the <code>async with</code> clause. When used as a context manager, the client automatically closes all connections on the exit of context, so its lifetime is defined explicitly.</p> <p>We can use <code>allow_bulk</code> parameter to enable bulk requests whenever the protocol version allows it or to deny bulk requests in any case.</p> Version False True v1 getnext getnext v2c getnext getbulk v3 getnext getbulk <p><code>SnmpSession</code> constructor offers lots of configuration variables for fine-tuning. Refer to the  SnmpSession reference for further details. In our example, we set the agent's address and SNMP community to the given values.</p> fetch.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(\n        addr=addr, community=community, allow_bulk=True\n    ) as session:\n        async for k, v in session.fetch(oid):\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> <p>We use <code>SnmpSession.fetch()</code> function to iterate within base OID just like the <code>SnmpSession.getnext()</code> and <code>SnmpSession.getbulk()</code>.</p> <p>The function is an asynchronous iterator returning pairs of <code>(OID, value)</code>, so we use <code>async for</code> construction to iterate over the values. See SnmpSession.getbulk() reference for further details. </p> fetch.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(\n        addr=addr, community=community, allow_bulk=True\n    ) as session:\n        async for k, v in session.fetch(oid):\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> <p>It is up to the application how to deal with the result. In our example we just print it.</p> fetch.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(\n        addr=addr, community=community, allow_bulk=True\n    ) as session:\n        async for k, v in session.fetch(oid):\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> <p>Lets run our asynchronous <code>main()</code> function via <code>asyncio.run</code> and pass first command-line parameters as address, community, and oid.</p>"},{"location":"examples/async/fetch/#running","title":"Running","text":"<p>Let's check our script. Run example as:</p> <pre><code>$ python3 examples/async/fetch.py 127.0.0.1 public 1.3.6.1.2.1.1\n1.3.6.1.2.1.1.1.0: b'Linux d280d3a0a307 5.15.49-linuxkit #1 SMP Tue Sep 13 07:51:46 UTC 2022 x86_64'\n1.3.6.1.2.1.1.2.0: 1.3.6.1.4.1.8072.3.2.10\n1.3.6.1.2.1.1.3.0: 36567296\n1.3.6.1.2.1.1.4.0: b'test &lt;test@example.com&gt;'\n1.3.6.1.2.1.1.5.0: b'd280d3a0a307'\n1.3.6.1.2.1.1.6.0: b'Gufo SNMP Test'\n1.3.6.1.2.1.1.7.0: 72\n...\n</code></pre>"},{"location":"examples/async/get-v3/","title":"Gufo SNMP Example: SNMPv3 Get Request","text":"<p>In the previous example, we demonstrated how to request a single item using SNMP v2c  in Gufo SNMP. Now, we'll show you how to achieve the same with SNMP v3,  which offers a similar API with additional authentication options.</p> <p>Despite SNMP v3's increased complexity, Gufo SNMP effectively handles all the intricacies,  making SNMP v3 operations as straightforward as v2c.   Let's modify our previous example to utilize SNMP v3.</p> get.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import Aes128Key, DesKey, Md5Key, Sha1Key, SnmpSession, User\n\nAUTH_ALG = {\n    \"md5\": Md5Key,\n    \"sha\": Sha1Key,\n}\n\nPRIV_ALG = {\n    \"des\": DesKey,\n    \"aes128\": Aes128Key,\n}\n\n\ndef get_user() -&gt; User:\n    name = sys.argv[2]\n    if len(sys.argv) &gt; 4:\n        auth_alg, key = sys.argv[4].split(\":\", 1)\n        auth_key = AUTH_ALG[auth_alg](key.encode())\n    else:\n        auth_key = None\n    if len(sys.argv) &gt; 5:\n        priv_alg, key = sys.argv[5].split(\":\", 1)\n        priv_key = PRIV_ALG[priv_alg](key.encode())\n    else:\n        priv_key = None\n    return User(name, auth_key=auth_key, priv_key=priv_key)\n\n\nasync def main(addr: str, user: User, oid: str) -&gt; None:\n    async with SnmpSession(addr=addr, user=user) as session:\n        r = await session.get(oid)\n        print(r)\n\n\nasyncio.run(main(sys.argv[1], get_user(), sys.argv[3]))\n</code></pre> <p>Let's see the details.</p> <p>get.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import Aes128Key, DesKey, Md5Key, Sha1Key, SnmpSession, User\n\nAUTH_ALG = {\n    \"md5\": Md5Key,\n    \"sha\": Sha1Key,\n}\n\nPRIV_ALG = {\n    \"des\": DesKey,\n    \"aes128\": Aes128Key,\n}\n</code></pre> Gufo SNMP is an async library. In our case we should run the client from our synchronous script, so we need to import <code>asyncio</code> to use <code>asyncio.run()</code>.</p> <p>get.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import Aes128Key, DesKey, Md5Key, Sha1Key, SnmpSession, User\n\nAUTH_ALG = {\n    \"md5\": Md5Key,\n    \"sha\": Sha1Key,\n}\n\nPRIV_ALG = {\n    \"des\": DesKey,\n    \"aes128\": Aes128Key,\n}\n</code></pre> Import <code>sys</code> module to parse the CLI argument.</p> <p>Warning</p> <p>We use <code>sys.argv</code> only for demonstration purposes. Use <code>argsparse</code> or alternatives in real-world applications.</p> get.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import Aes128Key, DesKey, Md5Key, Sha1Key, SnmpSession, User\n\nAUTH_ALG = {\n    \"md5\": Md5Key,\n    \"sha\": Sha1Key,\n}\n\nPRIV_ALG = {\n    \"des\": DesKey,\n    \"aes128\": Aes128Key,\n}\n</code></pre> <p><code>SnmpSession</code> object holds all necessary API, so import it from <code>gufo.snmp</code>. We also need to import <code>User</code> class and key algorithm helpers.</p> get.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import Aes128Key, DesKey, Md5Key, Sha1Key, SnmpSession, User\n\nAUTH_ALG = {\n    \"md5\": Md5Key,\n    \"sha\": Sha1Key,\n}\n\nPRIV_ALG = {\n    \"des\": DesKey,\n    \"aes128\": Aes128Key,\n}\n</code></pre> <p>SNMPv3 offers various authentication options, so we define mappings between human-readable names and Gufo SNMP key wrappers to use later in the <code>get_user</code> function.</p> <p>get.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import Aes128Key, DesKey, Md5Key, Sha1Key, SnmpSession, User\n\nAUTH_ALG = {\n    \"md5\": Md5Key,\n    \"sha\": Sha1Key,\n}\n\nPRIV_ALG = {\n    \"des\": DesKey,\n    \"aes128\": Aes128Key,\n}\n</code></pre> Similarly, SNMPv3 offers various privacy options, and we create mappings  between human-readable names and key wrappers for these privacy options. </p> get.py<pre><code>def get_user() -&gt; User:\n    name = sys.argv[2]\n    if len(sys.argv) &gt; 4:\n        auth_alg, key = sys.argv[4].split(\":\", 1)\n        auth_key = AUTH_ALG[auth_alg](key.encode())\n    else:\n        auth_key = None\n    if len(sys.argv) &gt; 5:\n        priv_alg, key = sys.argv[5].split(\":\", 1)\n        priv_key = PRIV_ALG[priv_alg](key.encode())\n    else:\n        priv_key = None\n    return User(name, auth_key=auth_key, priv_key=priv_key)\n</code></pre> <p>While SNMP v2c relies on a simple community string for authentication,  SNMPv3 introduces the more intricate User-Based Security Model (USM).  In this model, a user typically consists of a username, along with optional authentication and privacy options. Gufo SNMP encapsulates these details within the <code>User</code> class.</p> <p>To facilitate the configuration process, we define the <code>get_user</code> function.  This function processes command-line arguments and returns an instance of the <code>User</code> class.</p> <p>get.py<pre><code>def get_user() -&gt; User:\n    name = sys.argv[2]\n    if len(sys.argv) &gt; 4:\n        auth_alg, key = sys.argv[4].split(\":\", 1)\n        auth_key = AUTH_ALG[auth_alg](key.encode())\n    else:\n        auth_key = None\n    if len(sys.argv) &gt; 5:\n        priv_alg, key = sys.argv[5].split(\":\", 1)\n        priv_key = PRIV_ALG[priv_alg](key.encode())\n    else:\n        priv_key = None\n    return User(name, auth_key=auth_key, priv_key=priv_key)\n</code></pre> We get user name from 3-rd command-line positional parameters.</p> <p>get.py<pre><code>def get_user() -&gt; User:\n    name = sys.argv[2]\n    if len(sys.argv) &gt; 4:\n        auth_alg, key = sys.argv[4].split(\":\", 1)\n        auth_key = AUTH_ALG[auth_alg](key.encode())\n    else:\n        auth_key = None\n    if len(sys.argv) &gt; 5:\n        priv_alg, key = sys.argv[5].split(\":\", 1)\n        priv_key = PRIV_ALG[priv_alg](key.encode())\n    else:\n        priv_key = None\n    return User(name, auth_key=auth_key, priv_key=priv_key)\n</code></pre> Authentication options are optionals, so we're checking for 5-th command-line parameter.</p> <p>get.py<pre><code>def get_user() -&gt; User:\n    name = sys.argv[2]\n    if len(sys.argv) &gt; 4:\n        auth_alg, key = sys.argv[4].split(\":\", 1)\n        auth_key = AUTH_ALG[auth_alg](key.encode())\n    else:\n        auth_key = None\n    if len(sys.argv) &gt; 5:\n        priv_alg, key = sys.argv[5].split(\":\", 1)\n        priv_key = PRIV_ALG[priv_alg](key.encode())\n    else:\n        priv_key = None\n    return User(name, auth_key=auth_key, priv_key=priv_key)\n</code></pre> If privacy option is set, we consider it has format of <code>&lt;alg&gt;:&lt;key&gt;</code>, where:</p> <ul> <li><code>&lt;alg&gt;</code> - authentication algorithm, which must be one of <code>AUTH_ALG</code> keys.</li> <li><code>&lt;key&gt;</code> - an authentication key.</li> </ul> <p>Note</p> <p>SNMPv3 intoduces 3 form of keys:</p> <pre><code>* Password\n* Master key\n* Localized key\n</code></pre> <p>Such a variety often introduces a mess and you need to have a clear meaning of which of key you really passing. Gufo SNMP supports all three forms of keys which may be specified as additional optional parameters for <code>*Key</code> classes. We use default settings (password) for this example.</p> <p>Then we find a proper key class via <code>AUTH_ALG</code> mapping and pass a key.</p> <p>Note</p> <p>All keys in Gufo SNMP are passed as <code>bytes</code>, so we use <code>.encode()</code> method to convert from <code>str</code>.</p> get.py<pre><code>def get_user() -&gt; User:\n    name = sys.argv[2]\n    if len(sys.argv) &gt; 4:\n        auth_alg, key = sys.argv[4].split(\":\", 1)\n        auth_key = AUTH_ALG[auth_alg](key.encode())\n    else:\n        auth_key = None\n    if len(sys.argv) &gt; 5:\n        priv_alg, key = sys.argv[5].split(\":\", 1)\n        priv_key = PRIV_ALG[priv_alg](key.encode())\n    else:\n        priv_key = None\n    return User(name, auth_key=auth_key, priv_key=priv_key)\n</code></pre> <p>If privacy key is not found, set it to <code>None</code> to disable privacy settings.</p> <p>get.py<pre><code>def get_user() -&gt; User:\n    name = sys.argv[2]\n    if len(sys.argv) &gt; 4:\n        auth_alg, key = sys.argv[4].split(\":\", 1)\n        auth_key = AUTH_ALG[auth_alg](key.encode())\n    else:\n        auth_key = None\n    if len(sys.argv) &gt; 5:\n        priv_alg, key = sys.argv[5].split(\":\", 1)\n        priv_key = PRIV_ALG[priv_alg](key.encode())\n    else:\n        priv_key = None\n    return User(name, auth_key=auth_key, priv_key=priv_key)\n</code></pre> The privacy settings are handled just like as the authentication ones. We expect privacy settings in 6-th command-line parameter, and then use <code>PRIV_ALG</code> mapping to get a proper algorithm.</p> <p>Just like a privacy settings, <code>None</code> value means no encryption.</p> <p>get.py<pre><code>def get_user() -&gt; User:\n    name = sys.argv[2]\n    if len(sys.argv) &gt; 4:\n        auth_alg, key = sys.argv[4].split(\":\", 1)\n        auth_key = AUTH_ALG[auth_alg](key.encode())\n    else:\n        auth_key = None\n    if len(sys.argv) &gt; 5:\n        priv_alg, key = sys.argv[5].split(\":\", 1)\n        priv_key = PRIV_ALG[priv_alg](key.encode())\n    else:\n        priv_key = None\n    return User(name, auth_key=auth_key, priv_key=priv_key)\n</code></pre> Then we construct and return an <code>User</code> instance.</p> get.py<pre><code>async def main(addr: str, user: User, oid: str) -&gt; None:\n    async with SnmpSession(addr=addr, user=user) as session:\n        r = await session.get(oid)\n        print(r)\n</code></pre> <p>Asynchronous code must be executed in the asynchronous functions or coroutines. So we define our function as <code>async</code>. We expect the following arguments:</p> <ul> <li>Address of the agent.</li> <li><code>User</code> instance.</li> <li>OID to query.</li> </ul> get.py<pre><code>async def main(addr: str, user: User, oid: str) -&gt; None:\n    async with SnmpSession(addr=addr, user=user) as session:\n        r = await session.get(oid)\n        print(r)\n</code></pre> <p>First, we need to create <code>SnmpSession</code> object which wraps the client's session. The <code>SnmpSession</code> may be used as an instance directly or operated as async context manager with the <code>async with</code> clause. When used as a context manager, the client automatically closes all connections on the exit of context, so its lifetime is defined explicitly.</p> <p><code>SnmpSession</code> constructor offers lots of configuration variables for fine-tuning. Refer to the  SnmpSession reference for further details. In our example, we set the agent's address and SNMP community to the given values.</p> get.py<pre><code>async def main(addr: str, user: User, oid: str) -&gt; None:\n    async with SnmpSession(addr=addr, user=user) as session:\n        r = await session.get(oid)\n        print(r)\n</code></pre> <p>We use <code>SnmpSession.get()</code> function to query OID. The function is asynchronous and must be awaited. See SnmpSession.get() reference for further details.</p> get.py<pre><code>async def main(addr: str, user: User, oid: str) -&gt; None:\n    async with SnmpSession(addr=addr, user=user) as session:\n        r = await session.get(oid)\n        print(r)\n</code></pre> <p>It is up to the application how to deal with the result. In our example we just print it.</p> get.py<pre><code>asyncio.run(main(sys.argv[1], get_user(), sys.argv[3]))\n</code></pre> <p>Lets run our asynchronous <code>main()</code> function via <code>asyncio.run</code>. Pass first command-line parameters as address, construct user via <code>get_user</code> function, and pass OID.</p>"},{"location":"examples/async/get-v3/#running","title":"Running","text":"<p>Let's check our script. Run example as:</p> <pre><code>$ python3 examples/async/get-v3.py 127.0.0.1 public 1.3.6.1.2.1.1.6.0 sha:12345678 aes128:87654321\nGufo SNMP Test\n</code></pre>"},{"location":"examples/async/get/","title":"Gufo SNMP Example: Single Item Get Request","text":"<p><code>Get</code> is one of the basic SNMP operations allowing to query of the agent  for one or more management keys. Let's consider the situation of getting the single key.</p> get.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(addr=addr, community=community) as session:\n        r = await session.get(oid)\n        print(r)\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> <p>Let's see the details.</p> <p>get.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(addr=addr, community=community) as session:\n        r = await session.get(oid)\n        print(r)\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> Gufo SNMP is an async library. In our case we should run the client from our synchronous script, so we need to import <code>asyncio</code> to use <code>asyncio.run()</code>.</p> <p>get.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(addr=addr, community=community) as session:\n        r = await session.get(oid)\n        print(r)\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> Import <code>sys</code> module to parse the CLI argument.</p> <p>Warning</p> <p>We use <code>sys.argv</code> only for demonstration purposes. Use <code>argsparse</code> or alternatives in real-world applications.</p> get.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(addr=addr, community=community) as session:\n        r = await session.get(oid)\n        print(r)\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> <p><code>SnmpSession</code> object holds all necessary API, so import it from <code>gufo.snmp</code>.</p> get.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(addr=addr, community=community) as session:\n        r = await session.get(oid)\n        print(r)\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> <p>Asynchronous code must be executed in the asynchronous functions or coroutines. So we define our function as <code>async</code>. We expect the following arguments:</p> <ul> <li>Address of the agent.</li> <li>SNMP community to authorize.</li> <li>OID to query.</li> </ul> get.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(addr=addr, community=community) as session:\n        r = await session.get(oid)\n        print(r)\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> <p>First, we need to create <code>SnmpSession</code> object which wraps the client's session. The <code>SnmpSession</code> may be used as an instance directly or operated as async context manager with the <code>async with</code> clause. When used as a context manager, the client automatically closes all connections on the exit of context, so its lifetime is defined explicitly.</p> <p><code>SnmpSession</code> constructor offers lots of configuration variables for fine-tuning. Refer to the  SnmpSession reference for further details. In our example, we set the agent's address and SNMP community to the given values.</p> get.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(addr=addr, community=community) as session:\n        r = await session.get(oid)\n        print(r)\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> <p>We use <code>SnmpSession.get()</code> function to query OID. The function is asynchronous and must be awaited. See SnmpSession.get() reference for further details.</p> get.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(addr=addr, community=community) as session:\n        r = await session.get(oid)\n        print(r)\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> <p>It is up to the application how to deal with the result. In our example we just print it.</p> get.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(addr=addr, community=community) as session:\n        r = await session.get(oid)\n        print(r)\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> <p>Lets run our asynchronous <code>main()</code> function via <code>asyncio.run</code> and pass first command-line parameters as address, community, and OID.</p>"},{"location":"examples/async/get/#running","title":"Running","text":"<p>Let's check our script. Run example as:</p> <pre><code>$ python3 examples/async/get.py 127.0.0.1 public 1.3.6.1.2.1.1.6.0\nGufo SNMP Test\n</code></pre>"},{"location":"examples/async/getbulk/","title":"Gufo SNMP Example: GetBulk Request","text":"<p>We have mastered the iteration of the MIB view in our getnext example. SNMP v2 also offers more effective approach - the GetBulk request. Gufo SNMP hides all implementation difference and the interface to the GetBulk requests is almost identical to the GetNext one.</p> getbulk.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(addr=addr, community=community) as session:\n        async for k, v in session.getbulk(oid):\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> <p>Let's see the details.</p> <p>getbulk.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(addr=addr, community=community) as session:\n        async for k, v in session.getbulk(oid):\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> Gufo SNMP is an async library. In our case we should run the client from our synchronous script, so we need to import <code>asyncio</code> to use <code>asyncio.run()</code>.</p> <p>getbulk.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(addr=addr, community=community) as session:\n        async for k, v in session.getbulk(oid):\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> Import <code>sys</code> module to parse the CLI argument.</p> <p>Warning</p> <p>We use <code>sys.argv</code> only for demonstration purposes. Use <code>argsparse</code> or alternatives in real-world applications.</p> getbulk.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(addr=addr, community=community) as session:\n        async for k, v in session.getbulk(oid):\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> <p><code>SnmpSession</code> object holds all necessary API, so import it from <code>gufo.snmp</code>.</p> getbulk.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(addr=addr, community=community) as session:\n        async for k, v in session.getbulk(oid):\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> <p>Asynchronous code must be executed in the asynchronous functions or coroutines. So we define our function as <code>async</code>. We expect the following arguments:</p> <ul> <li>Address of the agent.</li> <li>SNMP community to authorize.</li> <li>Base OID to query.</li> </ul> getbulk.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(addr=addr, community=community) as session:\n        async for k, v in session.getbulk(oid):\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> <p>First, we need to create <code>SnmpSession</code> object which wraps the client's session. The <code>SnmpSession</code> may be used as an instance directly or operated as async context manager with the <code>async with</code> clause. When used as a context manager, the client automatically closes all connections on the exit of context, so its lifetime is defined explicitly.</p> <p><code>SnmpSession</code> constructor offers lots of configuration variables for fine-tuning. Refer to the  SnmpSession reference for further details. In our example, we set the agent's address and SNMP community to the given values.</p> getbulk.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(addr=addr, community=community) as session:\n        async for k, v in session.getbulk(oid):\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> <p>We use <code>SnmpSession.getbulk()</code> function to iterate within base OID. The function is an asynchronous iterator returning pairs of <code>(OID, value)</code>, so we use <code>async for</code> construction to iterate over the values. See SnmpSession.getbulk() reference for further details. </p> getbulk.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(addr=addr, community=community) as session:\n        async for k, v in session.getbulk(oid):\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> <p>It is up to the application how to deal with the result. In our example we just print it.</p> getbulk.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(addr=addr, community=community) as session:\n        async for k, v in session.getbulk(oid):\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> <p>Lets run our asynchronous <code>main()</code> function via <code>asyncio.run</code> and pass first command-line parameters as address, community, and oid.</p>"},{"location":"examples/async/getbulk/#running","title":"Running","text":"<p>Let's check our script. Run example as:</p> <pre><code>$ python3 examples/async/getbulk.py 127.0.0.1 public 1.3.6.1.2.1.1\n1.3.6.1.2.1.1.1.0: b'Linux d280d3a0a307 5.15.49-linuxkit #1 SMP Tue Sep 13 07:51:46 UTC 2022 x86_64'\n1.3.6.1.2.1.1.2.0: 1.3.6.1.4.1.8072.3.2.10\n1.3.6.1.2.1.1.3.0: 36567296\n1.3.6.1.2.1.1.4.0: b'test &lt;test@example.com&gt;'\n1.3.6.1.2.1.1.5.0: b'd280d3a0a307'\n1.3.6.1.2.1.1.6.0: b'Gufo SNMP Test'\n1.3.6.1.2.1.1.7.0: 72\n...\n</code></pre>"},{"location":"examples/async/getmany/","title":"Gufo SNMP Example: Multi Items Get Request","text":"<p>We have mastered the requesting of single item in our get example. But SNMP allows to query multiple keys in single request. Let's consider the example.</p> getmany.py<pre><code>import asyncio\nimport sys\nfrom typing import List\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oids: List[str]) -&gt; None:\n    async with SnmpSession(addr=addr, community=community) as session:\n        r = await session.get_many(oids)\n        for k, v in r.items():\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], list(sys.argv[3:])))\n</code></pre> <p>Let's see the details.</p> <p>getmany.py<pre><code>import asyncio\nimport sys\nfrom typing import List\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oids: List[str]) -&gt; None:\n    async with SnmpSession(addr=addr, community=community) as session:\n        r = await session.get_many(oids)\n        for k, v in r.items():\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], list(sys.argv[3:])))\n</code></pre> Gufo SNMP is an async library. In our case we should run the client from our synchronous script, so we need to import <code>asyncio</code> to use <code>asyncio.run()</code>.</p> getmany.py<pre><code>import asyncio\nimport sys\nfrom typing import List\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oids: List[str]) -&gt; None:\n    async with SnmpSession(addr=addr, community=community) as session:\n        r = await session.get_many(oids)\n        for k, v in r.items():\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], list(sys.argv[3:])))\n</code></pre> <p>Import <code>sys</code> module to parse the CLI argument.</p> <p>Warning</p> <p>We use <code>sys.argv</code> only for demonstration purposes. Use <code>argsparse</code> or alternatives in real-world applications.</p> <p>getmany.py<pre><code>import asyncio\nimport sys\nfrom typing import List\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oids: List[str]) -&gt; None:\n    async with SnmpSession(addr=addr, community=community) as session:\n        r = await session.get_many(oids)\n        for k, v in r.items():\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], list(sys.argv[3:])))\n</code></pre> Gufo SNMP is a typed library and it is good practice to place type hints in your code, so we import required type hints from Python's <code>typing</code> module.</p> getmany.py<pre><code>import asyncio\nimport sys\nfrom typing import List\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oids: List[str]) -&gt; None:\n    async with SnmpSession(addr=addr, community=community) as session:\n        r = await session.get_many(oids)\n        for k, v in r.items():\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], list(sys.argv[3:])))\n</code></pre> <p><code>SnmpSession</code> object holds all necessary API, so import it from <code>gufo.snmp</code>.</p> getmany.py<pre><code>import asyncio\nimport sys\nfrom typing import List\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oids: List[str]) -&gt; None:\n    async with SnmpSession(addr=addr, community=community) as session:\n        r = await session.get_many(oids)\n        for k, v in r.items():\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], list(sys.argv[3:])))\n</code></pre> <p>Asynchronous code must be executed in the asynchronous functions or coroutines. So we define our function as <code>async</code>. We expect the following arguments:</p> <ul> <li>Address of the agent.</li> <li>SNMP community to authorize.</li> <li>List of OIDs to query.</li> </ul> getmany.py<pre><code>import asyncio\nimport sys\nfrom typing import List\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oids: List[str]) -&gt; None:\n    async with SnmpSession(addr=addr, community=community) as session:\n        r = await session.get_many(oids)\n        for k, v in r.items():\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], list(sys.argv[3:])))\n</code></pre> <p>First, we need to create <code>SnmpSession</code> object which wraps the client's session. The <code>SnmpSession</code> may be used as an instance directly or operated as async context manager with the <code>async with</code> clause. When used as a context manager, the client automatically closes all connections on the exit of context, so its lifetime is defined explicitly.</p> <p><code>SnmpSession</code> constructor offers lots of configuration variables for fine-tuning. Refer to the  SnmpSession reference for further details. In our example, we set the agent's address and SNMP community to the given values.</p> getmany.py<pre><code>import asyncio\nimport sys\nfrom typing import List\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oids: List[str]) -&gt; None:\n    async with SnmpSession(addr=addr, community=community) as session:\n        r = await session.get_many(oids)\n        for k, v in r.items():\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], list(sys.argv[3:])))\n</code></pre> <p>We use <code>SnmpSession.get_many()</code> function to query multiple OIDs. The function is asynchronous and must be awaited. See SnmpSession.get() reference for further details.</p> <p><code>get_many()</code> returns a <code>dict</code>, where keys are the requested OIDs, and values are the query results.</p> <p>Note</p> <p><code>get_many()</code> ignores non-existent OIDs, so it is up to the application to check the resulting dict for missed keys.</p> getmany.py<pre><code>import asyncio\nimport sys\nfrom typing import List\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oids: List[str]) -&gt; None:\n    async with SnmpSession(addr=addr, community=community) as session:\n        r = await session.get_many(oids)\n        for k, v in r.items():\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], list(sys.argv[3:])))\n</code></pre> <p>It is up to the application how to deal with the result. In our example we just print all the items.</p> getmany.py<pre><code>import asyncio\nimport sys\nfrom typing import List\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oids: List[str]) -&gt; None:\n    async with SnmpSession(addr=addr, community=community) as session:\n        r = await session.get_many(oids)\n        for k, v in r.items():\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], list(sys.argv[3:])))\n</code></pre> <p>Lets run our asynchronous <code>main()</code> function via <code>asyncio.run</code> and pass first command-line parameters as address, community and OIDs. We use the rest of command line as the list of OIDs to query.</p>"},{"location":"examples/async/getmany/#running","title":"Running","text":"<p>Let's check our script. Run example as:</p> <pre><code>$ python3 examples/async/getmany.py 127.0.0.1 public 1.3.6.1.2.1.1.6.0 1.3.6.1.2.1.1.4.0\n1.3.6.1.2.1.1.6.0: Gufo SNMP Test\n1.3.6.1.2.1.1.4.0: test &lt;me@example.com&gt;\n</code></pre>"},{"location":"examples/async/getnext/","title":"Gufo SNMP Example: GetNext Request","text":"<p>We have mastered the requesting of single or multiple keys in our get and getmany examples. The SNMP also defines the way of retrieving all keys under the given OID - namely the GetNext request.</p> getnext.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(addr=addr, community=community) as session:\n        async for k, v in session.getnext(oid):\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> <p>Let's see the details.</p> <p>getnext.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(addr=addr, community=community) as session:\n        async for k, v in session.getnext(oid):\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> Gufo SNMP is an async library. In our case we should run the client from our synchronous script, so we need to import <code>asyncio</code> to use <code>asyncio.run()</code>.</p> <p>getnext.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(addr=addr, community=community) as session:\n        async for k, v in session.getnext(oid):\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> Import <code>sys</code> module to parse the CLI argument.</p> <p>Warning</p> <p>We use <code>sys.argv</code> only for demonstration purposes. Use <code>argsparse</code> or alternatives in real-world applications.</p> getnext.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(addr=addr, community=community) as session:\n        async for k, v in session.getnext(oid):\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> <p><code>SnmpSession</code> object holds all necessary API, so import it from <code>gufo.snmp</code>.</p> getnext.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(addr=addr, community=community) as session:\n        async for k, v in session.getnext(oid):\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> <p>Asynchronous code must be executed in the asynchronous functions or coroutines. So we define our function as <code>async</code>. We expect the following arguments:</p> <ul> <li>Address of the agent.</li> <li>SNMP community to authorize.</li> <li>Base OID to query.</li> </ul> getnext.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(addr=addr, community=community) as session:\n        async for k, v in session.getnext(oid):\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> <p>First, we need to create <code>SnmpSession</code> object which wraps the client's session. The <code>SnmpSession</code> may be used as an instance directly or operated as async context manager with the <code>async with</code> clause. When used as a context manager, the client automatically closes all connections on the exit of context, so its lifetime is defined explicitly.</p> <p><code>SnmpSession</code> constructor offers lots of configuration variables for fine-tuning. Refer to the  SnmpSession reference for further details. In our example, we set the agent's address and SNMP community to the given values.</p> getnext.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(addr=addr, community=community) as session:\n        async for k, v in session.getnext(oid):\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> <p>We use <code>SnmpSession.getnext()</code> function to iterate within base OID. The function is an asynchronous iterator returning pairs of <code>(OID, value)</code>, so we use <code>async for</code> construction to iterate over the values. See SnmpSession.getnext() reference for further details. </p> getnext.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(addr=addr, community=community) as session:\n        async for k, v in session.getnext(oid):\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> <p>It is up to the application how to deal with the result. In our example we just print it.</p> getnext.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(addr=addr, community=community) as session:\n        async for k, v in session.getnext(oid):\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> <p>Lets run our asynchronous <code>main()</code> function via <code>asyncio.run</code> and pass first command-line parameters as address, community, and oid.</p>"},{"location":"examples/async/getnext/#running","title":"Running","text":"<p>Let's check our script. Run example as:</p> <pre><code>$ python3 examples/async/getnext.py 127.0.0.1 public 1.3.6.1.2.1.1\n1.3.6.1.2.1.1.1.0: b'Linux d280d3a0a307 5.15.49-linuxkit #1 SMP Tue Sep 13 07:51:46 UTC 2022 x86_64'\n1.3.6.1.2.1.1.2.0: 1.3.6.1.4.1.8072.3.2.10\n1.3.6.1.2.1.1.3.0: 36567296\n1.3.6.1.2.1.1.4.0: b'test &lt;test@example.com&gt;'\n1.3.6.1.2.1.1.5.0: b'd280d3a0a307'\n1.3.6.1.2.1.1.6.0: b'Gufo SNMP Test'\n1.3.6.1.2.1.1.7.0: 72\n...\n</code></pre>"},{"location":"examples/async/ratelimit/","title":"Gufo SNMP Example: Rate Limiting","text":"<p>We have mastered the various ways of querying the MIB view in our get, getnext, getbulk, and fetch examples. But in real life, the aggressive SNMP polling may impose a great burden on the equipment's CPU and may lead to service degradation or, even, the loss of connectivity. Likely, Gufo SNMP offers the easy way to limit the rate of the outgoing requests to adjust the impact. </p> ratelimit.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(\n        addr=addr, community=community, allow_bulk=True, limit_rps=10\n    ) as session:\n        async for k, v in session.fetch(oid):\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> <p>Let's see the details.</p> <p>ratelimit.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(\n        addr=addr, community=community, allow_bulk=True, limit_rps=10\n    ) as session:\n        async for k, v in session.fetch(oid):\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> Gufo SNMP is an async library. In our case we should run the client from our synchronous script, so we need to import <code>asyncio</code> to use <code>asyncio.run()</code>.</p> <p>ratelimit.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(\n        addr=addr, community=community, allow_bulk=True, limit_rps=10\n    ) as session:\n        async for k, v in session.fetch(oid):\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> Import <code>sys</code> module to parse the CLI argument.</p> <p>Warning</p> <p>We use <code>sys.argv</code> only for demonstration purposes. Use <code>argsparse</code> or alternatives in real-world applications.</p> ratelimit.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(\n        addr=addr, community=community, allow_bulk=True, limit_rps=10\n    ) as session:\n        async for k, v in session.fetch(oid):\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> <p><code>SnmpSession</code> object holds all necessary API, so import it from <code>gufo.snmp</code>.</p> ratelimit.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(\n        addr=addr, community=community, allow_bulk=True, limit_rps=10\n    ) as session:\n        async for k, v in session.fetch(oid):\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> <p>Asynchronous code must be executed in the asynchronous functions or coroutines. So we define our function as <code>async</code>. We expect the following arguments:</p> <ul> <li>Address of the agent.</li> <li>SNMP community to authorize.</li> <li>Base OID to query.</li> </ul> ratelimit.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(\n        addr=addr, community=community, allow_bulk=True, limit_rps=10\n    ) as session:\n        async for k, v in session.fetch(oid):\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> <p>First, we need to create <code>SnmpSession</code> object which wraps the client's session. The <code>SnmpSession</code> may be used as an instance directly or operated as async context manager with the <code>async with</code> clause. When used as a context manager, the client automatically closes all connections on the exit of context, so its lifetime is defined explicitly.</p> <p>We can use <code>allow_bulk</code> parameter to enable bulk requests whenever the protocol version allows it or to deny bulk requests in any case. See fetch examples for details.</p> <p>The only difference from fetch example is the <code>limit_rps</code> option which urges Gufo SNMP to limit outgoing requests. The parameter holds the limit of the outgoing requests per second. In out example we will send no more than 10 requests per second while iterating over the MIB. If you need to send every request in several seconds, use the fractions. i.e. <code>0.25</code> means one request per each 4 seconds.</p> <p><code>SnmpSession</code> constructor offers lots of configuration variables for fine-tuning. Refer to the  SnmpSession reference for further details. In our example, we set the agent's address and SNMP community to the given values.</p> ratelimit.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(\n        addr=addr, community=community, allow_bulk=True, limit_rps=10\n    ) as session:\n        async for k, v in session.fetch(oid):\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> <p>We use <code>SnmpSession.fetch()</code> function to iterate within base OID just like the <code>SnmpSession.getnext()</code> and <code>SnmpSession.getbulk()</code>.</p> <p>The function is an asynchronous iterator returning pairs of <code>(OID, value)</code>, so we use <code>async for</code> construction to iterate over the values. See SnmpSession.getbulk() reference for further details. </p> ratelimit.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(\n        addr=addr, community=community, allow_bulk=True, limit_rps=10\n    ) as session:\n        async for k, v in session.fetch(oid):\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> <p>It is up to the application how to deal with the result. In our example we just print it.</p> ratelimit.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.snmp import SnmpSession\n\n\nasync def main(addr: str, community: str, oid: str) -&gt; None:\n    async with SnmpSession(\n        addr=addr, community=community, allow_bulk=True, limit_rps=10\n    ) as session:\n        async for k, v in session.fetch(oid):\n            print(f\"{k}: {v}\")\n\n\nasyncio.run(main(sys.argv[1], sys.argv[2], sys.argv[3]))\n</code></pre> <p>Lets run our asynchronous <code>main()</code> function via <code>asyncio.run</code> and pass first command-line parameters as address, community, and oid.</p>"},{"location":"examples/async/ratelimit/#running","title":"Running","text":"<p>Let's check our script. Run example as:</p> <pre><code>$ python3 examples/async/ratelimit.py 127.0.0.1 public 1.3.6.1.2.1.1\n1.3.6.1.2.1.1.1.0: b'Linux d280d3a0a307 5.15.49-linuxkit #1 SMP Tue Sep 13 07:51:46 UTC 2022 x86_64'\n1.3.6.1.2.1.1.2.0: 1.3.6.1.4.1.8072.3.2.10\n1.3.6.1.2.1.1.3.0: 36567296\n1.3.6.1.2.1.1.4.0: b'test &lt;test@example.com&gt;'\n1.3.6.1.2.1.1.5.0: b'd280d3a0a307'\n1.3.6.1.2.1.1.6.0: b'Gufo SNMP Test'\n1.3.6.1.2.1.1.7.0: 72\n...\n</code></pre>"},{"location":"examples/sync/","title":"Gufo SNMP Examples: Sync Mode.","text":"<p>This part of the documentation contains a detailed explanation of the samples from the examples/sync/ folder.</p> <ul> <li>get.py: Single Get Request</li> <li>getmany.py: Multi Items Get Request</li> <li>getnext.py: GetNext Request</li> <li>getbulk.py: GetBulk Request</li> <li>fetch.py: Fetch</li> <li>get-v3.py: SNMPv3 Get Request.</li> <li>engine-id-discovery.py: SNMPv3 Engine ID Discovery</li> <li>debugging.py: Debugging</li> </ul>"},{"location":"examples/sync/debugging/","title":"Gufo SNMP Example: Debugging","text":"<p>In our previous examples we have relied on existing and running SNMP agent. But Gufo SNMP offers the useful <code>Snmpd</code> wrapper to configure and run the local instance of the <code>snmpd</code> which can be started and terminated along your application.</p> <p>Note</p> <p>This feature in requires an installed Net-SNMP package. Refer to your operation system's manuals for details.</p> debugging.py<pre><code>from gufo.snmp.snmpd import Snmpd\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main() -&gt; None:\n    with Snmpd(), SnmpSession(addr=\"127.0.0.1\", port=10161) as session:\n        for oid, value in session.getnext(\"1.3.6.1.2.1.1\"):\n            print(f\"{oid}: {value}\")\n\n\nmain()\n</code></pre> <p>Let's see the details.</p> debugging.py<pre><code>from gufo.snmp.snmpd import Snmpd\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main() -&gt; None:\n    with Snmpd(), SnmpSession(addr=\"127.0.0.1\", port=10161) as session:\n        for oid, value in session.getnext(\"1.3.6.1.2.1.1\"):\n            print(f\"{oid}: {value}\")\n\n\nmain()\n</code></pre> <p><code>Snmpd</code> wrapper should be imported from <code>gufo.snmp.snmpd</code> directly.</p> debugging.py<pre><code>from gufo.snmp.snmpd import Snmpd\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main() -&gt; None:\n    with Snmpd(), SnmpSession(addr=\"127.0.0.1\", port=10161) as session:\n        for oid, value in session.getnext(\"1.3.6.1.2.1.1\"):\n            print(f\"{oid}: {value}\")\n\n\nmain()\n</code></pre> <p><code>SnmpSession</code> object holds all necessary API. We're using a synchronous version from <code>gufo.snmp.sync_client</code>.</p> debugging.py<pre><code>from gufo.snmp.snmpd import Snmpd\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main() -&gt; None:\n    with Snmpd(), SnmpSession(addr=\"127.0.0.1\", port=10161) as session:\n        for oid, value in session.getnext(\"1.3.6.1.2.1.1\"):\n            print(f\"{oid}: {value}\")\n\n\nmain()\n</code></pre> <p>We define our <code>main</code> function. Unlike our get, getmany, and getnext examples we do not expect any external arguments.</p> debugging.py<pre><code>from gufo.snmp.snmpd import Snmpd\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main() -&gt; None:\n    with Snmpd(), SnmpSession(addr=\"127.0.0.1\", port=10161) as session:\n        for oid, value in session.getnext(\"1.3.6.1.2.1.1\"):\n            print(f\"{oid}: {value}\")\n\n\nmain()\n</code></pre> <p>We need to create <code>Snmpd</code> context to run local snmpd instance. Then we need to create <code>SnmpSession</code> object which wraps the client's session. We using context managers using <code>with</code> clause. Refer to the get, getmany, and getnext examples for additional details.</p> <p>Both <code>Snmpd</code> and <code>SnmpSession</code> are highly configurable, so refer to the Snmpd and SnmpSession references.</p> debugging.py<pre><code>from gufo.snmp.snmpd import Snmpd\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main() -&gt; None:\n    with Snmpd(), SnmpSession(addr=\"127.0.0.1\", port=10161) as session:\n        for oid, value in session.getnext(\"1.3.6.1.2.1.1\"):\n            print(f\"{oid}: {value}\")\n\n\nmain()\n</code></pre> <p>We use <code>SnmpSession.getnext()</code> function to iterate within base OID. The function is an iterator yielding pairs of <code>(OID, value)</code>, so we use <code>for</code> construction to iterate over the values. See SnmpSession.getnext() reference for further details. </p> debugging.py<pre><code>from gufo.snmp.snmpd import Snmpd\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main() -&gt; None:\n    with Snmpd(), SnmpSession(addr=\"127.0.0.1\", port=10161) as session:\n        for oid, value in session.getnext(\"1.3.6.1.2.1.1\"):\n            print(f\"{oid}: {value}\")\n\n\nmain()\n</code></pre> <p>It is up to the application how to deal with the result. In our example we just print it.</p> debugging.py<pre><code>from gufo.snmp.snmpd import Snmpd\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main() -&gt; None:\n    with Snmpd(), SnmpSession(addr=\"127.0.0.1\", port=10161) as session:\n        for oid, value in session.getnext(\"1.3.6.1.2.1.1\"):\n            print(f\"{oid}: {value}\")\n\n\nmain()\n</code></pre> <p>Lets run our <code>main()</code> function.</p>"},{"location":"examples/sync/debugging/#running","title":"Running","text":"<p>Let's check our script. Run example as:</p> <pre><code>$ python3 examples/sync/debugging.py\n1.3.6.1.2.1.1.1.0: b'Linux d280d3a0a307 5.15.49-linuxkit #1 SMP Tue Sep 13 07:51:46 UTC 2022 x86_64'\n1.3.6.1.2.1.1.2.0: 1.3.6.1.4.1.8072.3.2.10\n1.3.6.1.2.1.1.3.0: 36567296\n1.3.6.1.2.1.1.4.0: b'test &lt;test@example.com&gt;'\n1.3.6.1.2.1.1.5.0: b'd280d3a0a307'\n1.3.6.1.2.1.1.6.0: b'Gufo SNMP Test'\n1.3.6.1.2.1.1.7.0: 72\n...\n</code></pre>"},{"location":"examples/sync/engine-id-discovery/","title":"SNMPv3 Engine ID Discovery","text":"<p>SNMP v3 introduces the concept of the Engine ID, a unique identifier for each SNMP agent  in the network.</p> <p>Gufo SNMP automatically performs Engine ID discovery as needed.  However, you can retrieve the actual value for various purposes,  such as inventory management or performance optimization,  and use it to skip the discovery step later.</p> engine-id-discovery.py<pre><code>import sys\n\nfrom gufo.snmp import User\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, user_name: str) -&gt; None:\n    with SnmpSession(addr=addr, user=User(user_name)) as session:\n        engine_id = session.get_engine_id()\n        print(engine_id.hex())\n\n\nmain(sys.argv[1], sys.argv[2])\n</code></pre> <p>Let's see the details.</p> engine-id-discovery.py<pre><code>import sys\n\nfrom gufo.snmp import User\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, user_name: str) -&gt; None:\n    with SnmpSession(addr=addr, user=User(user_name)) as session:\n        engine_id = session.get_engine_id()\n        print(engine_id.hex())\n\n\nmain(sys.argv[1], sys.argv[2])\n</code></pre> <p>Import <code>sys</code> module to parse the CLI argument.</p> <p>Warning</p> <p>We use <code>sys.argv</code> only for demonstration purposes. Use <code>argsparse</code> or alternatives in real-world applications.</p> <p>engine-id-discovery.py<pre><code>import sys\n\nfrom gufo.snmp import User\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, user_name: str) -&gt; None:\n    with SnmpSession(addr=addr, user=User(user_name)) as session:\n        engine_id = session.get_engine_id()\n        print(engine_id.hex())\n\n\nmain(sys.argv[1], sys.argv[2])\n</code></pre> We need to import an <code>User</code> class.</p> engine-id-discovery.py<pre><code>import sys\n\nfrom gufo.snmp import User\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, user_name: str) -&gt; None:\n    with SnmpSession(addr=addr, user=User(user_name)) as session:\n        engine_id = session.get_engine_id()\n        print(engine_id.hex())\n\n\nmain(sys.argv[1], sys.argv[2])\n</code></pre> <p><code>SnmpSession</code> object holds all necessary API. We're using a synchronous version from <code>gufo.snmp.sync_client</code>.</p> engine-id-discovery.py<pre><code>import sys\n\nfrom gufo.snmp import User\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, user_name: str) -&gt; None:\n    with SnmpSession(addr=addr, user=User(user_name)) as session:\n        engine_id = session.get_engine_id()\n        print(engine_id.hex())\n\n\nmain(sys.argv[1], sys.argv[2])\n</code></pre> <p>We define our main function and expect the following arguments:</p> <ul> <li>Address of the agent.</li> <li>Valid user name.</li> </ul> engine-id-discovery.py<pre><code>import sys\n\nfrom gufo.snmp import User\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, user_name: str) -&gt; None:\n    with SnmpSession(addr=addr, user=User(user_name)) as session:\n        engine_id = session.get_engine_id()\n        print(engine_id.hex())\n\n\nmain(sys.argv[1], sys.argv[2])\n</code></pre> <p>First, we need to create <code>SnmpSession</code> object which wraps the client's session. The <code>SnmpSession</code> may be used as an instance directly or operated as context manager using the <code>with</code> clause. When used as a context manager, the client automatically closes all connections on the exit of context, so its lifetime is defined explicitly.</p> <p><code>SnmpSession</code> constructor offers lots of configuration variables for fine-tuning. Refer to the  SnmpSession reference for further details. In our example, we set the agent's address and create SNMPv3 user with default settings.</p> <p>Note</p> <p>To perform Engine ID discovery, the only mandatory parameter is the username.  Authentication and privacy settings can be left at their default values.</p> <p>engine-id-discovery.py<pre><code>import sys\n\nfrom gufo.snmp import User\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, user_name: str) -&gt; None:\n    with SnmpSession(addr=addr, user=User(user_name)) as session:\n        engine_id = session.get_engine_id()\n        print(engine_id.hex())\n\n\nmain(sys.argv[1], sys.argv[2])\n</code></pre> <code>SnmpSession.get_engine_id()</code> returns discovered Engine Id as bytes.</p> <p>engine-id-discovery.py<pre><code>import sys\n\nfrom gufo.snmp import User\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, user_name: str) -&gt; None:\n    with SnmpSession(addr=addr, user=User(user_name)) as session:\n        engine_id = session.get_engine_id()\n        print(engine_id.hex())\n\n\nmain(sys.argv[1], sys.argv[2])\n</code></pre> Now, we print the collected Engine ID. Since it is of bytes type,  we convert the output to hexadecimal form, which is commonly used  in network equipment configuration.</p> engine-id-discovery.py<pre><code>import sys\n\nfrom gufo.snmp import User\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, user_name: str) -&gt; None:\n    with SnmpSession(addr=addr, user=User(user_name)) as session:\n        engine_id = session.get_engine_id()\n        print(engine_id.hex())\n\n\nmain(sys.argv[1], sys.argv[2])\n</code></pre> <p>Lets run our <code>main()</code> function and pass first command-line parameters as address, community, and OID.</p>"},{"location":"examples/sync/engine-id-discovery/#running","title":"Running","text":"<p>Let's check our script. Run example as:</p> <pre><code>$ python3 examples/sync/engine-id-discovery.py 127.0.0.1 user1\n8000b85c03ec02732921c0\n</code></pre>"},{"location":"examples/sync/fetch/","title":"Gufo SNMP Example: Fetch","text":"<p>We have mastered the iteration of the MIB view in our getnext and getbulk examples. Gufo SNMP also offers a convenient wrapper to combine them into the single <code>.fetch()</code> wrapper. This may be useful when the application combines SNMP v1 and SNMP v2c queries and it is desirable to hide such implementation details.</p> fetch.py<pre><code>import sys\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oid: str) -&gt; None:\n    with SnmpSession(\n        addr=addr, community=community, allow_bulk=True\n    ) as session:\n        for k, v in session.fetch(oid):\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], sys.argv[3])\n</code></pre> <p>Let's see the details.</p> <p>fetch.py<pre><code>import sys\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oid: str) -&gt; None:\n    with SnmpSession(\n        addr=addr, community=community, allow_bulk=True\n    ) as session:\n        for k, v in session.fetch(oid):\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], sys.argv[3])\n</code></pre> Import <code>sys</code> module to parse the CLI argument.</p> <p>Warning</p> <p>We use <code>sys.argv</code> only for demonstration purposes. Use <code>argsparse</code> or alternatives in real-world applications.</p> fetch.py<pre><code>import sys\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oid: str) -&gt; None:\n    with SnmpSession(\n        addr=addr, community=community, allow_bulk=True\n    ) as session:\n        for k, v in session.fetch(oid):\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], sys.argv[3])\n</code></pre> <p><code>SnmpSession</code> object holds all necessary API. We're using a synchronous version from <code>gufo.snmp.sync_client</code>.</p> fetch.py<pre><code>import sys\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oid: str) -&gt; None:\n    with SnmpSession(\n        addr=addr, community=community, allow_bulk=True\n    ) as session:\n        for k, v in session.fetch(oid):\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], sys.argv[3])\n</code></pre> <p>We define our main function and expect the following arguments:</p> <ul> <li>Address of the agent.</li> <li>SNMP community to authorize.</li> <li>Base OID to query.</li> </ul> fetch.py<pre><code>import sys\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oid: str) -&gt; None:\n    with SnmpSession(\n        addr=addr, community=community, allow_bulk=True\n    ) as session:\n        for k, v in session.fetch(oid):\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], sys.argv[3])\n</code></pre> <p>First, we need to create <code>SnmpSession</code> object which wraps the client's session. The <code>SnmpSession</code> may be used as an instance directly or operated as context manager using the <code>with</code> clause. When used as a context manager, the client automatically closes all connections on the exit of context, so its lifetime is defined explicitly.</p> <p>We can use <code>allow_bulk</code> parameter to enable bulk requests whenever the protocol version allows it or to deny bulk requests in any case.</p> Version False True v1 getnext getnext v2c getnext getbulk v3 getnext getbulk <p><code>SnmpSession</code> constructor offers lots of configuration variables for fine-tuning. Refer to the  SnmpSession reference for further details. In our example, we set the agent's address and SNMP community to the given values.</p> fetch.py<pre><code>import sys\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oid: str) -&gt; None:\n    with SnmpSession(\n        addr=addr, community=community, allow_bulk=True\n    ) as session:\n        for k, v in session.fetch(oid):\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], sys.argv[3])\n</code></pre> <p>We use <code>SnmpSession.fetch()</code> function to iterate within base OID just like the <code>SnmpSession.getnext()</code> and <code>SnmpSession.getbulk()</code>.</p> <p>The function is an iterator returning pairs of <code>(OID, value)</code>, so we use <code>for</code> construction to iterate over the values. See SnmpSession.getbulk() reference for further details. </p> fetch.py<pre><code>import sys\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oid: str) -&gt; None:\n    with SnmpSession(\n        addr=addr, community=community, allow_bulk=True\n    ) as session:\n        for k, v in session.fetch(oid):\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], sys.argv[3])\n</code></pre> <p>It is up to the application how to deal with the result. In our example we just print it.</p> fetch.py<pre><code>import sys\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oid: str) -&gt; None:\n    with SnmpSession(\n        addr=addr, community=community, allow_bulk=True\n    ) as session:\n        for k, v in session.fetch(oid):\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], sys.argv[3])\n</code></pre> <p>Lets run our <code>main()</code> function and pass first command-line parameters as address, community, and oid.</p>"},{"location":"examples/sync/fetch/#running","title":"Running","text":"<p>Let's check our script. Run example as:</p> <pre><code>$ python3 examples/sync/fetch.py 127.0.0.1 public 1.3.6.1.2.1.1\n1.3.6.1.2.1.1.1.0: b'Linux d280d3a0a307 5.15.49-linuxkit #1 SMP Tue Sep 13 07:51:46 UTC 2022 x86_64'\n1.3.6.1.2.1.1.2.0: 1.3.6.1.4.1.8072.3.2.10\n1.3.6.1.2.1.1.3.0: 36567296\n1.3.6.1.2.1.1.4.0: b'test &lt;test@example.com&gt;'\n1.3.6.1.2.1.1.5.0: b'd280d3a0a307'\n1.3.6.1.2.1.1.6.0: b'Gufo SNMP Test'\n1.3.6.1.2.1.1.7.0: 72\n...\n</code></pre>"},{"location":"examples/sync/get-v3/","title":"Gufo SNMP Example: SNMPv3 Get Request","text":"<p>In the previous example, we demonstrated how to request a single item using SNMP v2c  in Gufo SNMP. Now, we'll show you how to achieve the same with SNMP v3,  which offers a similar API with additional authentication options.</p> <p>Despite SNMP v3's increased complexity, Gufo SNMP effectively handles all the intricacies,  making SNMP v3 operations as straightforward as v2c.   Let's modify our previous example to utilize SNMP v3.</p> get.py<pre><code>import sys\n\nfrom gufo.snmp import Aes128Key, DesKey, Md5Key, Sha1Key, User\nfrom gufo.snmp.sync_client import SnmpSession\n\nAUTH_ALG = {\n    \"md5\": Md5Key,\n    \"sha\": Sha1Key,\n}\n\nPRIV_ALG = {\n    \"des\": DesKey,\n    \"aes128\": Aes128Key,\n}\n\n\ndef get_user() -&gt; User:\n    name = sys.argv[2]\n    if len(sys.argv) &gt; 4:\n        auth_alg, key = sys.argv[4].split(\":\", 1)\n        auth_key = AUTH_ALG[auth_alg](key.encode())\n    else:\n        auth_key = None\n    if len(sys.argv) &gt; 5:\n        priv_alg, key = sys.argv[5].split(\":\", 1)\n        priv_key = PRIV_ALG[priv_alg](key.encode())\n    else:\n        priv_key = None\n    return User(name, auth_key=auth_key, priv_key=priv_key)\n\n\ndef main(addr: str, user: User, oid: str) -&gt; None:\n    with SnmpSession(addr=addr, user=user) as session:\n        r = session.get(oid)\n        print(r)\n\n\nmain(sys.argv[1], get_user(), sys.argv[3])\n</code></pre> <p>Let's see the details.</p> <p>get.py<pre><code>import sys\n\nfrom gufo.snmp import Aes128Key, DesKey, Md5Key, Sha1Key, User\nfrom gufo.snmp.sync_client import SnmpSession\n\nAUTH_ALG = {\n    \"md5\": Md5Key,\n    \"sha\": Sha1Key,\n}\n\nPRIV_ALG = {\n    \"des\": DesKey,\n    \"aes128\": Aes128Key,\n}\n</code></pre> Import <code>sys</code> module to parse the CLI argument.</p> <p>Warning</p> <p>We use <code>sys.argv</code> only for demonstration purposes. Use <code>argsparse</code> or alternatives in real-world applications.</p> <p>get.py<pre><code>import sys\n\nfrom gufo.snmp import Aes128Key, DesKey, Md5Key, Sha1Key, User\nfrom gufo.snmp.sync_client import SnmpSession\n\nAUTH_ALG = {\n    \"md5\": Md5Key,\n    \"sha\": Sha1Key,\n}\n\nPRIV_ALG = {\n    \"des\": DesKey,\n    \"aes128\": Aes128Key,\n}\n</code></pre> We need to import <code>User</code> class and key algorithm helpers.</p> get.py<pre><code>import sys\n\nfrom gufo.snmp import Aes128Key, DesKey, Md5Key, Sha1Key, User\nfrom gufo.snmp.sync_client import SnmpSession\n\nAUTH_ALG = {\n    \"md5\": Md5Key,\n    \"sha\": Sha1Key,\n}\n\nPRIV_ALG = {\n    \"des\": DesKey,\n    \"aes128\": Aes128Key,\n}\n</code></pre> <p><code>SnmpSession</code> object holds all necessary API. We're using a synchronous version from <code>gufo.snmp.sync_client</code>.</p> get.py<pre><code>import sys\n\nfrom gufo.snmp import Aes128Key, DesKey, Md5Key, Sha1Key, User\nfrom gufo.snmp.sync_client import SnmpSession\n\nAUTH_ALG = {\n    \"md5\": Md5Key,\n    \"sha\": Sha1Key,\n}\n\nPRIV_ALG = {\n    \"des\": DesKey,\n    \"aes128\": Aes128Key,\n}\n</code></pre> <p>SNMPv3 offers various authentication options, so we define mappings between human-readable names and Gufo SNMP key wrappers to use later in the <code>get_user</code> function.</p> <p>get.py<pre><code>import sys\n\nfrom gufo.snmp import Aes128Key, DesKey, Md5Key, Sha1Key, User\nfrom gufo.snmp.sync_client import SnmpSession\n\nAUTH_ALG = {\n    \"md5\": Md5Key,\n    \"sha\": Sha1Key,\n}\n\nPRIV_ALG = {\n    \"des\": DesKey,\n    \"aes128\": Aes128Key,\n}\n</code></pre> Similarly, SNMPv3 offers various privacy options, and we create mappings  between human-readable names and key wrappers for these privacy options. </p> get.py<pre><code>def get_user() -&gt; User:\n    name = sys.argv[2]\n    if len(sys.argv) &gt; 4:\n        auth_alg, key = sys.argv[4].split(\":\", 1)\n        auth_key = AUTH_ALG[auth_alg](key.encode())\n    else:\n        auth_key = None\n    if len(sys.argv) &gt; 5:\n        priv_alg, key = sys.argv[5].split(\":\", 1)\n        priv_key = PRIV_ALG[priv_alg](key.encode())\n    else:\n        priv_key = None\n    return User(name, auth_key=auth_key, priv_key=priv_key)\n</code></pre> <p>While SNMP v2c relies on a simple community string for authentication,  SNMPv3 introduces the more intricate User-Based Security Model (USM).  In this model, a user typically consists of a username, along with optional authentication and privacy options. Gufo SNMP encapsulates these details within the <code>User</code> class.</p> <p>To facilitate the configuration process, we define the <code>get_user</code> function.  This function processes command-line arguments and returns an instance of the <code>User</code> class.</p> <p>get.py<pre><code>def get_user() -&gt; User:\n    name = sys.argv[2]\n    if len(sys.argv) &gt; 4:\n        auth_alg, key = sys.argv[4].split(\":\", 1)\n        auth_key = AUTH_ALG[auth_alg](key.encode())\n    else:\n        auth_key = None\n    if len(sys.argv) &gt; 5:\n        priv_alg, key = sys.argv[5].split(\":\", 1)\n        priv_key = PRIV_ALG[priv_alg](key.encode())\n    else:\n        priv_key = None\n    return User(name, auth_key=auth_key, priv_key=priv_key)\n</code></pre> We get user name from 3-rd command-line positional parameters.</p> <p>get.py<pre><code>def get_user() -&gt; User:\n    name = sys.argv[2]\n    if len(sys.argv) &gt; 4:\n        auth_alg, key = sys.argv[4].split(\":\", 1)\n        auth_key = AUTH_ALG[auth_alg](key.encode())\n    else:\n        auth_key = None\n    if len(sys.argv) &gt; 5:\n        priv_alg, key = sys.argv[5].split(\":\", 1)\n        priv_key = PRIV_ALG[priv_alg](key.encode())\n    else:\n        priv_key = None\n    return User(name, auth_key=auth_key, priv_key=priv_key)\n</code></pre> Authentication options are optionals, so we're checking for 5-th command-line parameter.</p> <p>get.py<pre><code>def get_user() -&gt; User:\n    name = sys.argv[2]\n    if len(sys.argv) &gt; 4:\n        auth_alg, key = sys.argv[4].split(\":\", 1)\n        auth_key = AUTH_ALG[auth_alg](key.encode())\n    else:\n        auth_key = None\n    if len(sys.argv) &gt; 5:\n        priv_alg, key = sys.argv[5].split(\":\", 1)\n        priv_key = PRIV_ALG[priv_alg](key.encode())\n    else:\n        priv_key = None\n    return User(name, auth_key=auth_key, priv_key=priv_key)\n</code></pre> If privacy option is set, we consider it has format of <code>&lt;alg&gt;:&lt;key&gt;</code>, where:</p> <ul> <li><code>&lt;alg&gt;</code> - authentication algorithm, which must be one of <code>AUTH_ALG</code> keys.</li> <li><code>&lt;key&gt;</code> - an authentication key.</li> </ul> <p>Note</p> <p>SNMPv3 intoduces 3 form of keys:</p> <pre><code>* Password\n* Master key\n* Localized key\n</code></pre> <p>Such a variety often introduces a mess and you need to have a clear meaning of which of key you really passing. Gufo SNMP supports all three forms of keys which may be specified as additional optional parameters for <code>*Key</code> classes. We use default settings (password) for this example.</p> <p>Then we find a proper key class via <code>AUTH_ALG</code> mapping and pass a key.</p> <p>Note</p> <p>All keys in Gufo SNMP are passed as <code>bytes</code>, so we use <code>.encode()</code> method to convert from <code>str</code>.</p> get.py<pre><code>def get_user() -&gt; User:\n    name = sys.argv[2]\n    if len(sys.argv) &gt; 4:\n        auth_alg, key = sys.argv[4].split(\":\", 1)\n        auth_key = AUTH_ALG[auth_alg](key.encode())\n    else:\n        auth_key = None\n    if len(sys.argv) &gt; 5:\n        priv_alg, key = sys.argv[5].split(\":\", 1)\n        priv_key = PRIV_ALG[priv_alg](key.encode())\n    else:\n        priv_key = None\n    return User(name, auth_key=auth_key, priv_key=priv_key)\n</code></pre> <p>If privacy key is not found, set it to <code>None</code> to disable privacy settings.</p> <p>get.py<pre><code>def get_user() -&gt; User:\n    name = sys.argv[2]\n    if len(sys.argv) &gt; 4:\n        auth_alg, key = sys.argv[4].split(\":\", 1)\n        auth_key = AUTH_ALG[auth_alg](key.encode())\n    else:\n        auth_key = None\n    if len(sys.argv) &gt; 5:\n        priv_alg, key = sys.argv[5].split(\":\", 1)\n        priv_key = PRIV_ALG[priv_alg](key.encode())\n    else:\n        priv_key = None\n    return User(name, auth_key=auth_key, priv_key=priv_key)\n</code></pre> The privacy settings are handled just like as the authentication ones. We expect privacy settings in 6-th command-line parameter, and then use <code>PRIV_ALG</code> mapping to get a proper algorithm.</p> <p>Just like a privacy settings, <code>None</code> value means no encryption.</p> <p>get.py<pre><code>def get_user() -&gt; User:\n    name = sys.argv[2]\n    if len(sys.argv) &gt; 4:\n        auth_alg, key = sys.argv[4].split(\":\", 1)\n        auth_key = AUTH_ALG[auth_alg](key.encode())\n    else:\n        auth_key = None\n    if len(sys.argv) &gt; 5:\n        priv_alg, key = sys.argv[5].split(\":\", 1)\n        priv_key = PRIV_ALG[priv_alg](key.encode())\n    else:\n        priv_key = None\n    return User(name, auth_key=auth_key, priv_key=priv_key)\n</code></pre> Then we construct and return an <code>User</code> instance.</p> get.py<pre><code>def main(addr: str, user: User, oid: str) -&gt; None:\n    with SnmpSession(addr=addr, user=user) as session:\n        r = session.get(oid)\n        print(r)\n</code></pre> <p>We define our main function and expect the following arguments:</p> <ul> <li>Address of the agent.</li> <li><code>User</code> instance.</li> <li>OID to query.</li> </ul> get.py<pre><code>def main(addr: str, user: User, oid: str) -&gt; None:\n    with SnmpSession(addr=addr, user=user) as session:\n        r = session.get(oid)\n        print(r)\n</code></pre> <p>First, we need to create <code>SnmpSession</code> object which wraps the client's session. The <code>SnmpSession</code> may be used as an instance directly or operated as context manager using the <code>with</code> clause. When used as a context manager, the client automatically closes all connections on the exit of context, so its lifetime is defined explicitly.</p> <p><code>SnmpSession</code> constructor offers lots of configuration variables for fine-tuning. Refer to the  SnmpSession reference for further details. In our example, we set the agent's address and SNMP community to the given values.</p> get.py<pre><code>def main(addr: str, user: User, oid: str) -&gt; None:\n    with SnmpSession(addr=addr, user=user) as session:\n        r = session.get(oid)\n        print(r)\n</code></pre> <p>We use <code>SnmpSession.get()</code> function to query OID. See SnmpSession.get() reference for further details.</p> get.py<pre><code>def main(addr: str, user: User, oid: str) -&gt; None:\n    with SnmpSession(addr=addr, user=user) as session:\n        r = session.get(oid)\n        print(r)\n</code></pre> <p>It is up to the application how to deal with the result. In our example we just print it.</p> get.py<pre><code>main(sys.argv[1], get_user(), sys.argv[3])\n</code></pre> <p>Lets run our <code>main()</code> function. Pass first command-line parameters as address, construct user via <code>get_user</code> function, and pass OID.</p>"},{"location":"examples/sync/get-v3/#running","title":"Running","text":"<p>Let's check our script. Run example as:</p> <pre><code>$ python3 examples/sync/get-v3.py 127.0.0.1 public 1.3.6.1.2.1.1.6.0 sha:12345678 aes128:87654321\nGufo SNMP Test\n</code></pre>"},{"location":"examples/sync/get/","title":"Gufo SNMP Example: Single Item Get Request","text":"<p><code>Get</code> is one of the basic SNMP operations allowing to query of the agent  for one or more management keys. Let's consider the situation of getting the single key.</p> get.py<pre><code>import sys\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oid: str) -&gt; None:\n    with SnmpSession(addr=addr, community=community) as session:\n        r = session.get(oid)\n        print(r)\n\n\nmain(sys.argv[1], sys.argv[2], sys.argv[3])\n</code></pre> <p>Let's see the details.</p> <p>get.py<pre><code>import sys\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oid: str) -&gt; None:\n    with SnmpSession(addr=addr, community=community) as session:\n        r = session.get(oid)\n        print(r)\n\n\nmain(sys.argv[1], sys.argv[2], sys.argv[3])\n</code></pre> Import <code>sys</code> module to parse the CLI argument.</p> <p>Warning</p> <p>We use <code>sys.argv</code> only for demonstration purposes. Use <code>argsparse</code> or alternatives in real-world applications.</p> get.py<pre><code>import sys\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oid: str) -&gt; None:\n    with SnmpSession(addr=addr, community=community) as session:\n        r = session.get(oid)\n        print(r)\n\n\nmain(sys.argv[1], sys.argv[2], sys.argv[3])\n</code></pre> <p><code>SnmpSession</code> object holds all necessary API. We're using a synchronous version from <code>gufo.snmp.sync_client</code>.</p> get.py<pre><code>import sys\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oid: str) -&gt; None:\n    with SnmpSession(addr=addr, community=community) as session:\n        r = session.get(oid)\n        print(r)\n\n\nmain(sys.argv[1], sys.argv[2], sys.argv[3])\n</code></pre> <p>We define our main function and expect the following arguments:</p> <ul> <li>Address of the agent.</li> <li>SNMP community to authorize.</li> <li>OID to query.</li> </ul> get.py<pre><code>import sys\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oid: str) -&gt; None:\n    with SnmpSession(addr=addr, community=community) as session:\n        r = session.get(oid)\n        print(r)\n\n\nmain(sys.argv[1], sys.argv[2], sys.argv[3])\n</code></pre> <p>First, we need to create <code>SnmpSession</code> object which wraps the client's session. The <code>SnmpSession</code> may be used as an instance directly or operated as context manager using the <code>with</code> clause. When used as a context manager, the client automatically closes all connections on the exit of context, so its lifetime is defined explicitly.</p> <p><code>SnmpSession</code> constructor offers lots of configuration variables for fine-tuning. Refer to the  SnmpSession reference for further details. In our example, we set the agent's address and SNMP community to the given values.</p> get.py<pre><code>import sys\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oid: str) -&gt; None:\n    with SnmpSession(addr=addr, community=community) as session:\n        r = session.get(oid)\n        print(r)\n\n\nmain(sys.argv[1], sys.argv[2], sys.argv[3])\n</code></pre> <p>We use <code>SnmpSession.get()</code> function to query OID. See SnmpSession.get() reference for further details.</p> get.py<pre><code>import sys\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oid: str) -&gt; None:\n    with SnmpSession(addr=addr, community=community) as session:\n        r = session.get(oid)\n        print(r)\n\n\nmain(sys.argv[1], sys.argv[2], sys.argv[3])\n</code></pre> <p>It is up to the application how to deal with the result. In our example we just print it.</p> get.py<pre><code>import sys\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oid: str) -&gt; None:\n    with SnmpSession(addr=addr, community=community) as session:\n        r = session.get(oid)\n        print(r)\n\n\nmain(sys.argv[1], sys.argv[2], sys.argv[3])\n</code></pre> <p>Lets run our <code>main()</code> function pass first command-line parameters as address, community, and OID.</p>"},{"location":"examples/sync/get/#running","title":"Running","text":"<p>Let's check our script. Run example as:</p> <pre><code>$ python3 examples/sync/get.py 127.0.0.1 public 1.3.6.1.2.1.1.6.0\nGufo SNMP Test\n</code></pre>"},{"location":"examples/sync/getbulk/","title":"Gufo SNMP Example: GetBulk Request","text":"<p>We have mastered the iteration of the MIB view in our getnext example. SNMP v2 also offers more effective approach - the GetBulk request. Gufo SNMP hides all implementation difference and the interface to the GetBulk requests is almost identical to the GetNext one.</p> getbulk.py<pre><code>import sys\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oid: str) -&gt; None:\n    with SnmpSession(addr=addr, community=community) as session:\n        for k, v in session.getbulk(oid):\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], sys.argv[3])\n</code></pre> <p>Let's see the details.</p> <p>getbulk.py<pre><code>import sys\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oid: str) -&gt; None:\n    with SnmpSession(addr=addr, community=community) as session:\n        for k, v in session.getbulk(oid):\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], sys.argv[3])\n</code></pre> Import <code>sys</code> module to parse the CLI argument.</p> <p>Warning</p> <p>We use <code>sys.argv</code> only for demonstration purposes. Use <code>argsparse</code> or alternatives in real-world applications.</p> getbulk.py<pre><code>import sys\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oid: str) -&gt; None:\n    with SnmpSession(addr=addr, community=community) as session:\n        for k, v in session.getbulk(oid):\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], sys.argv[3])\n</code></pre> <p><code>SnmpSession</code> object holds all necessary API. We're using a synchronous version from <code>gufo.snmp.sync_client</code>.</p> getbulk.py<pre><code>import sys\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oid: str) -&gt; None:\n    with SnmpSession(addr=addr, community=community) as session:\n        for k, v in session.getbulk(oid):\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], sys.argv[3])\n</code></pre> <p>We define our main function and expect the following arguments:</p> <ul> <li>Address of the agent.</li> <li>SNMP community to authorize.</li> <li>Base OID to query.</li> </ul> getbulk.py<pre><code>import sys\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oid: str) -&gt; None:\n    with SnmpSession(addr=addr, community=community) as session:\n        for k, v in session.getbulk(oid):\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], sys.argv[3])\n</code></pre> <p>First, we need to create <code>SnmpSession</code> object which wraps the client's session. The <code>SnmpSession</code> may be used as an instance directly or operated as context manager using the <code>with</code> clause. When used as a context manager, the client automatically closes all connections on the exit of context, so its lifetime is defined explicitly.</p> <p><code>SnmpSession</code> constructor offers lots of configuration variables for fine-tuning. Refer to the  SnmpSession reference for further details. In our example, we set the agent's address and SNMP community to the given values.</p> getbulk.py<pre><code>import sys\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oid: str) -&gt; None:\n    with SnmpSession(addr=addr, community=community) as session:\n        for k, v in session.getbulk(oid):\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], sys.argv[3])\n</code></pre> <p>We use <code>SnmpSession.getbulk()</code> function to iterate within base OID. The function is an iterator yielding pairs of <code>(OID, value)</code>, so we use <code>for</code> construction to iterate over the values. See SnmpSession.getbulk() reference for further details. </p> getbulk.py<pre><code>import sys\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oid: str) -&gt; None:\n    with SnmpSession(addr=addr, community=community) as session:\n        for k, v in session.getbulk(oid):\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], sys.argv[3])\n</code></pre> <p>It is up to the application how to deal with the result. In our example we just print it.</p> getbulk.py<pre><code>import sys\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oid: str) -&gt; None:\n    with SnmpSession(addr=addr, community=community) as session:\n        for k, v in session.getbulk(oid):\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], sys.argv[3])\n</code></pre> <p>Lets run our <code>main()</code> function and pass first command-line parameters as address, community, and oid.</p>"},{"location":"examples/sync/getbulk/#running","title":"Running","text":"<p>Let's check our script. Run example as:</p> <pre><code>$ python3 examples/sync/getbulk.py 127.0.0.1 public 1.3.6.1.2.1.1\n1.3.6.1.2.1.1.1.0: b'Linux d280d3a0a307 5.15.49-linuxkit #1 SMP Tue Sep 13 07:51:46 UTC 2022 x86_64'\n1.3.6.1.2.1.1.2.0: 1.3.6.1.4.1.8072.3.2.10\n1.3.6.1.2.1.1.3.0: 36567296\n1.3.6.1.2.1.1.4.0: b'test &lt;test@example.com&gt;'\n1.3.6.1.2.1.1.5.0: b'd280d3a0a307'\n1.3.6.1.2.1.1.6.0: b'Gufo SNMP Test'\n1.3.6.1.2.1.1.7.0: 72\n...\n</code></pre>"},{"location":"examples/sync/getmany/","title":"Gufo SNMP Example: Multi Items Get Request","text":"<p>We have mastered the requesting of single item in our get example. But SNMP allows to query multiple keys in single request. Let's consider the example.</p> getmany.py<pre><code>import sys\nfrom typing import List\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oids: List[str]) -&gt; None:\n    with SnmpSession(addr=addr, community=community) as session:\n        r = session.get_many(oids)\n        for k, v in r.items():\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], list(sys.argv[3:]))\n</code></pre> <p>Let's see the details.</p> getmany.py<pre><code>import sys\nfrom typing import List\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oids: List[str]) -&gt; None:\n    with SnmpSession(addr=addr, community=community) as session:\n        r = session.get_many(oids)\n        for k, v in r.items():\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], list(sys.argv[3:]))\n</code></pre> <p>Import <code>sys</code> module to parse the CLI argument.</p> <p>Warning</p> <p>We use <code>sys.argv</code> only for demonstration purposes. Use <code>argsparse</code> or alternatives in real-world applications.</p> <p>getmany.py<pre><code>import sys\nfrom typing import List\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oids: List[str]) -&gt; None:\n    with SnmpSession(addr=addr, community=community) as session:\n        r = session.get_many(oids)\n        for k, v in r.items():\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], list(sys.argv[3:]))\n</code></pre> Gufo SNMP is a typed library and it is good practice to place type hints in your code, so we import required type hints from Python's <code>typing</code> module.</p> getmany.py<pre><code>import sys\nfrom typing import List\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oids: List[str]) -&gt; None:\n    with SnmpSession(addr=addr, community=community) as session:\n        r = session.get_many(oids)\n        for k, v in r.items():\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], list(sys.argv[3:]))\n</code></pre> <p><code>SnmpSession</code> object holds all necessary API. We're using a synchronous version from <code>gufo.snmp.sync_client</code>.</p> getmany.py<pre><code>import sys\nfrom typing import List\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oids: List[str]) -&gt; None:\n    with SnmpSession(addr=addr, community=community) as session:\n        r = session.get_many(oids)\n        for k, v in r.items():\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], list(sys.argv[3:]))\n</code></pre> <p>We define our main function and expect the following arguments:</p> <ul> <li>Address of the agent.</li> <li>SNMP community to authorize.</li> <li>List of OIDs to query.</li> </ul> getmany.py<pre><code>import sys\nfrom typing import List\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oids: List[str]) -&gt; None:\n    with SnmpSession(addr=addr, community=community) as session:\n        r = session.get_many(oids)\n        for k, v in r.items():\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], list(sys.argv[3:]))\n</code></pre> <p>First, we need to create <code>SnmpSession</code> object which wraps the client's session. The <code>SnmpSession</code> may be used as an instance directly or operated as context manager using the <code>with</code> clause. When used as a context manager, the client automatically closes all connections on the exit of context, so its lifetime is defined explicitly.</p> <p><code>SnmpSession</code> constructor offers lots of configuration variables for fine-tuning. Refer to the  SnmpSession reference for further details. In our example, we set the agent's address and SNMP community to the given values.</p> getmany.py<pre><code>import sys\nfrom typing import List\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oids: List[str]) -&gt; None:\n    with SnmpSession(addr=addr, community=community) as session:\n        r = session.get_many(oids)\n        for k, v in r.items():\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], list(sys.argv[3:]))\n</code></pre> <p>We use <code>SnmpSession.get_many()</code> function to query multiple OIDs. See SnmpSession.get() reference for further details.</p> <p><code>get_many()</code> returns a <code>dict</code>, where keys are the requested OIDs, and values are the query results.</p> <p>Note</p> <p><code>get_many()</code> ignores non-existent OIDs, so it is up to the application to check the resulting dict for missed keys.</p> getmany.py<pre><code>import sys\nfrom typing import List\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oids: List[str]) -&gt; None:\n    with SnmpSession(addr=addr, community=community) as session:\n        r = session.get_many(oids)\n        for k, v in r.items():\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], list(sys.argv[3:]))\n</code></pre> <p>It is up to the application how to deal with the result. In our example we just print all the items.</p> getmany.py<pre><code>import sys\nfrom typing import List\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oids: List[str]) -&gt; None:\n    with SnmpSession(addr=addr, community=community) as session:\n        r = session.get_many(oids)\n        for k, v in r.items():\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], list(sys.argv[3:]))\n</code></pre> <p>Lets run our <code>main()</code> function and pass first command-line parameters as address, community and OIDs. We use the rest of command line as the list of OIDs to query.</p>"},{"location":"examples/sync/getmany/#running","title":"Running","text":"<p>Let's check our script. Run example as:</p> <pre><code>$ python3 examples/sync/getmany.py 127.0.0.1 public 1.3.6.1.2.1.1.6.0 1.3.6.1.2.1.1.4.0\n1.3.6.1.2.1.1.6.0: Gufo SNMP Test\n1.3.6.1.2.1.1.4.0: test &lt;me@example.com&gt;\n</code></pre>"},{"location":"examples/sync/getnext/","title":"Gufo SNMP Example: GetNext Request","text":"<p>We have mastered the requesting of single or multiple keys in our get and getmany examples. The SNMP also defines the way of retrieving all keys under the given OID - namely the GetNext request.</p> getnext.py<pre><code>import sys\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oid: str) -&gt; None:\n    with SnmpSession(addr=addr, community=community) as session:\n        for k, v in session.getnext(oid):\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], sys.argv[3])\n</code></pre> <p>Let's see the details.</p> <p>getnext.py<pre><code>import sys\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oid: str) -&gt; None:\n    with SnmpSession(addr=addr, community=community) as session:\n        for k, v in session.getnext(oid):\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], sys.argv[3])\n</code></pre> Import <code>sys</code> module to parse the CLI argument.</p> <p>Warning</p> <p>We use <code>sys.argv</code> only for demonstration purposes. Use <code>argsparse</code> or alternatives in real-world applications.</p> getnext.py<pre><code>import sys\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oid: str) -&gt; None:\n    with SnmpSession(addr=addr, community=community) as session:\n        for k, v in session.getnext(oid):\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], sys.argv[3])\n</code></pre> <p><code>SnmpSession</code> object holds all necessary API. We're using a synchronous version from <code>gufo.snmp.sync_client</code>.</p> getnext.py<pre><code>import sys\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oid: str) -&gt; None:\n    with SnmpSession(addr=addr, community=community) as session:\n        for k, v in session.getnext(oid):\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], sys.argv[3])\n</code></pre> <p>We define our main function and expect the following arguments:</p> <ul> <li>Address of the agent.</li> <li>SNMP community to authorize.</li> <li>Base OID to query.</li> </ul> getnext.py<pre><code>import sys\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oid: str) -&gt; None:\n    with SnmpSession(addr=addr, community=community) as session:\n        for k, v in session.getnext(oid):\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], sys.argv[3])\n</code></pre> <p>First, we need to create <code>SnmpSession</code> object which wraps the client's session. The <code>SnmpSession</code> may be used as an instance directly or operated as context manager using the <code>with</code> clause. When used as a context manager, the client automatically closes all connections on the exit of context, so its lifetime is defined explicitly.</p> <p><code>SnmpSession</code> constructor offers lots of configuration variables for fine-tuning. Refer to the  SnmpSession reference for further details. In our example, we set the agent's address and SNMP community to the given values.</p> getnext.py<pre><code>import sys\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oid: str) -&gt; None:\n    with SnmpSession(addr=addr, community=community) as session:\n        for k, v in session.getnext(oid):\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], sys.argv[3])\n</code></pre> <p>We use <code>SnmpSession.getnext()</code> function to iterate within base OID. The function is an iterator yielding pairs of <code>(OID, value)</code>, so we use <code>for</code> construction to iterate over the values. See SnmpSession.getnext() reference for further details. </p> getnext.py<pre><code>import sys\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oid: str) -&gt; None:\n    with SnmpSession(addr=addr, community=community) as session:\n        for k, v in session.getnext(oid):\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], sys.argv[3])\n</code></pre> <p>It is up to the application how to deal with the result. In our example we just print it.</p> getnext.py<pre><code>import sys\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oid: str) -&gt; None:\n    with SnmpSession(addr=addr, community=community) as session:\n        for k, v in session.getnext(oid):\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], sys.argv[3])\n</code></pre> <p>Lets run our <code>main()</code> function pass first command-line parameters as address, community, and oid.</p>"},{"location":"examples/sync/getnext/#running","title":"Running","text":"<p>Let's check our script. Run example as:</p> <pre><code>$ python3 examples/sync/getnext.py 127.0.0.1 public 1.3.6.1.2.1.1\n1.3.6.1.2.1.1.1.0: b'Linux d280d3a0a307 5.15.49-linuxkit #1 SMP Tue Sep 13 07:51:46 UTC 2022 x86_64'\n1.3.6.1.2.1.1.2.0: 1.3.6.1.4.1.8072.3.2.10\n1.3.6.1.2.1.1.3.0: 36567296\n1.3.6.1.2.1.1.4.0: b'test &lt;test@example.com&gt;'\n1.3.6.1.2.1.1.5.0: b'd280d3a0a307'\n1.3.6.1.2.1.1.6.0: b'Gufo SNMP Test'\n1.3.6.1.2.1.1.7.0: 72\n...\n</code></pre>"},{"location":"examples/sync/ratelimit/","title":"Gufo SNMP Example: Rate Limiting","text":"<p>We have mastered the various ways of querying the MIB view in our get, getnext, getbulk, and fetch examples. But in real life, the aggressive SNMP polling may impose a great burden on the equipment's CPU and may lead to service degradation or, even, the loss of connectivity. Likely, Gufo SNMP offers the easy way to limit the rate of the outgoing requests to adjust the impact. </p> ratelimit.py<pre><code>import sys\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oid: str) -&gt; None:\n    with SnmpSession(\n        addr=addr, community=community, allow_bulk=True, limit_rps=10\n    ) as session:\n        for k, v in session.fetch(oid):\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], sys.argv[3])\n</code></pre> <p>Let's see the details.</p> <p>ratelimit.py<pre><code>import sys\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oid: str) -&gt; None:\n    with SnmpSession(\n        addr=addr, community=community, allow_bulk=True, limit_rps=10\n    ) as session:\n        for k, v in session.fetch(oid):\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], sys.argv[3])\n</code></pre> Import <code>sys</code> module to parse the CLI argument.</p> <p>Warning</p> <p>We use <code>sys.argv</code> only for demonstration purposes. Use <code>argsparse</code> or alternatives in real-world applications.</p> ratelimit.py<pre><code>import sys\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oid: str) -&gt; None:\n    with SnmpSession(\n        addr=addr, community=community, allow_bulk=True, limit_rps=10\n    ) as session:\n        for k, v in session.fetch(oid):\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], sys.argv[3])\n</code></pre> <p><code>SnmpSession</code> object holds all necessary API. We're using a synchronous version from <code>gufo.snmp.sync_client</code>.</p> ratelimit.py<pre><code>import sys\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oid: str) -&gt; None:\n    with SnmpSession(\n        addr=addr, community=community, allow_bulk=True, limit_rps=10\n    ) as session:\n        for k, v in session.fetch(oid):\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], sys.argv[3])\n</code></pre> <p>We define our main function and expect the following arguments:</p> <ul> <li>Address of the agent.</li> <li>SNMP community to authorize.</li> <li>Base OID to query.</li> </ul> ratelimit.py<pre><code>import sys\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oid: str) -&gt; None:\n    with SnmpSession(\n        addr=addr, community=community, allow_bulk=True, limit_rps=10\n    ) as session:\n        for k, v in session.fetch(oid):\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], sys.argv[3])\n</code></pre> <p>First, we need to create <code>SnmpSession</code> object which wraps the client's session. The <code>SnmpSession</code> may be used as an instance directly or operated as context manager using the <code>with</code> clause. When used as a context manager, the client automatically closes all connections on the exit of context, so its lifetime is defined explicitly.</p> <p>We can use <code>allow_bulk</code> parameter to enable bulk requests whenever the protocol version allows it or to deny bulk requests in any case. See fetch examples for details.</p> <p>The only difference from fetch example is the <code>limit_rps</code> option which urges Gufo SNMP to limit outgoing requests. The parameter holds the limit of the outgoing requests per second. In out example we will send no more than 10 requests per second while iterating over the MIB. If you need to send every request in several seconds, use the fractions. i.e. <code>0.25</code> means one request per each 4 seconds.</p> <p><code>SnmpSession</code> constructor offers lots of configuration variables for fine-tuning. Refer to the  SnmpSession reference for further details. In our example, we set the agent's address and SNMP community to the given values.</p> ratelimit.py<pre><code>import sys\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oid: str) -&gt; None:\n    with SnmpSession(\n        addr=addr, community=community, allow_bulk=True, limit_rps=10\n    ) as session:\n        for k, v in session.fetch(oid):\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], sys.argv[3])\n</code></pre> <p>We use <code>SnmpSession.fetch()</code> function to iterate within base OID just like the <code>SnmpSession.getnext()</code> and <code>SnmpSession.getbulk()</code>.</p> <p>The function is an iterator yieldig pairs of <code>(OID, value)</code>, so we use <code>for</code> construction to iterate over the values. See SnmpSession.getbulk() reference for further details. </p> ratelimit.py<pre><code>import sys\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oid: str) -&gt; None:\n    with SnmpSession(\n        addr=addr, community=community, allow_bulk=True, limit_rps=10\n    ) as session:\n        for k, v in session.fetch(oid):\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], sys.argv[3])\n</code></pre> <p>It is up to the application how to deal with the result. In our example we just print it.</p> ratelimit.py<pre><code>import sys\n\nfrom gufo.snmp.sync_client import SnmpSession\n\n\ndef main(addr: str, community: str, oid: str) -&gt; None:\n    with SnmpSession(\n        addr=addr, community=community, allow_bulk=True, limit_rps=10\n    ) as session:\n        for k, v in session.fetch(oid):\n            print(f\"{k}: {v}\")\n\n\nmain(sys.argv[1], sys.argv[2], sys.argv[3])\n</code></pre> <p>Lets run our <code>main()</code> function and pass first command-line parameters as address, community, and oid.</p>"},{"location":"examples/sync/ratelimit/#running","title":"Running","text":"<p>Let's check our script. Run example as:</p> <pre><code>$ python3 examples/sync/ratelimit.py 127.0.0.1 public 1.3.6.1.2.1.1\n1.3.6.1.2.1.1.1.0: b'Linux d280d3a0a307 5.15.49-linuxkit #1 SMP Tue Sep 13 07:51:46 UTC 2022 x86_64'\n1.3.6.1.2.1.1.2.0: 1.3.6.1.4.1.8072.3.2.10\n1.3.6.1.2.1.1.3.0: 36567296\n1.3.6.1.2.1.1.4.0: b'test &lt;test@example.com&gt;'\n1.3.6.1.2.1.1.5.0: b'd280d3a0a307'\n1.3.6.1.2.1.1.6.0: b'Gufo SNMP Test'\n1.3.6.1.2.1.1.7.0: 72\n...\n</code></pre>"},{"location":"man/","title":"Gufo SNMP Man Pages","text":"<ul> <li>gufo-snmp</li> </ul>"},{"location":"man/gufo-snmp/","title":"gufo-snmp - SNMP Client Utility","text":"<p><code>gufo-snmp</code> is a swiss-army knife for SNMP request which close resembles Net-SNMP family of CLI tools.</p>"},{"location":"man/gufo-snmp/#usage","title":"Usage","text":"<pre><code>usage: gufo-snmp [-h] [--version {v1,v2c,v3}] [-v1 | -v2c | -v3] [--command {GET,GETNEXT,GETBULK}] [-p PORT]\n                 [-c COMMUNITY] [-u USER] [-a {MD5,SHA}] [-A AUTH_PASS] [-x {DES,AES}] [-X SECURITY_PASS] [-O OFLAGS]\n                 address ...\n\nSNMP Client\n\npositional arguments:\n  address               Agent\n  oids                  OIDs\n\noptions:\n  -h, --help            show this help message and exit\n  --version {v1,v2c,v3}\n                        SNMP Protocol version\n  -v1                   SNMP v1\n  -v2c                  SNMP v2c\n  -v3                   SNMP v3\n  --command {GET,GETNEXT,GETBULK}\n                        Command\n  -p, --port PORT       Argent port\n  -c, --community COMMUNITY\n                        Community (v1/v2c)\n  -u, --user USER       User name (v3)\n  -a, --auth-protocol {MD5,SHA}\n                        Set authentication protocol (v3)\n  -A, --auth-pass AUTH_PASS\n                        Set authentication protocol pass-phrase (v3)\n  -x, --security-protocol {DES,AES}\n                        Set security protocol (v3)\n  -X, --security-pass SECURITY_PASS\n                        Set security protocol pass-phrase (v3)\n  -O OFLAGS             Output formatting flags (may be repeated or combined)\n                        Supported flags:\n                          a : print all strings in ascii format\n                          x : print all strings in hex format\n                          q : quick print for easier parsing\n                          Q : quick print with equal-signs\n                          T : print human-readable text along with hex strings\n                          v : print values only (not OID = value)\n</code></pre>"},{"location":"man/gufo-snmp/#output-formats","title":"Output Formats","text":""},{"location":"man/gufo-snmp/#ascii-oa","title":"ASCII (-Oa)","text":"<p>Print strings as text, replacing non-printable characters with dots.</p> <p>Example output: <pre><code>1.3.6.1.2.1.1.6.0 = Gufo SNMP Test\n</code></pre></p>"},{"location":"man/gufo-snmp/#hex-ox","title":"HEX (-Ox)","text":"<p>Print strings in hexadecimal format.</p> <p>Example output: <pre><code>1.3.6.1.2.1.1.6.0 = 47 75 66 6F 20 53 4E 4D 50 20 54 65 73 74\n</code></pre></p>"},{"location":"man/gufo-snmp/#ascii-hex-ot","title":"ASCII + HEX (-OT)","text":"<p>Print string in human-readable ASCII along with hexadecimal format.</p> <p>Example output: <pre><code>1.3.6.1.2.1.1.6.0 = Gufo SNMP Test 47 75 66 6F 20 53 4E 4D 50 20 54 65 73 74\n</code></pre></p>"},{"location":"man/gufo-snmp/#without-separator-qq","title":"Without Separator (-Qq)","text":"<p>Do not print <code>=</code> between oid and value.</p> <p>Example output: <pre><code>1.3.6.1.2.1.1.6.0 Gufo SNMP Test\n</code></pre></p>"},{"location":"man/gufo-snmp/#with-separator-qo","title":"With Separator (-QO)","text":"<p>Print <code>=</code> between oid and value.</p> <p>Example output: <pre><code>1.3.6.1.2.1.1.6.0 = Gufo SNMP Test\n</code></pre></p>"},{"location":"man/gufo-snmp/#value-only-ov","title":"Value Only (-Ov)","text":"<p>Do not print oid.</p> <p>Example output: <pre><code>Gufo SNMP Test\n</code></pre></p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>gufo.snmp<ul> <li>async_client<ul> <li>client</li> </ul> </li> <li>cli</li> <li>policer</li> <li>protocol</li> <li>snmpd</li> <li>sync_client<ul> <li>client</li> <li>getbulk</li> <li>getnext</li> </ul> </li> <li>typing</li> <li>user</li> <li>version</li> </ul> </li> </ul>"},{"location":"reference/gufo/snmp/","title":"gufo.snmp","text":"<p>Gufo SNMP: The accelerated Python SNMP client library.</p> <p>Attributes:</p> Name Type Description <code>__version__</code> <code>str</code> <p>Current version</p>"},{"location":"reference/gufo/snmp/#gufo.snmp.Aes128Key","title":"<code>Aes128Key</code>","text":"<p>               Bases: <code>BasePrivKey</code></p> <p>AES-128 Key.</p>"},{"location":"reference/gufo/snmp/#gufo.snmp.BaseAuthKey","title":"<code>BaseAuthKey</code>","text":"<p>               Bases: <code>BaseKey</code></p> <p>Authentication key base class.</p>"},{"location":"reference/gufo/snmp/#gufo.snmp.BasePrivKey","title":"<code>BasePrivKey</code>","text":"<p>               Bases: <code>BaseKey</code></p> <p>Privacy key base class.</p>"},{"location":"reference/gufo/snmp/#gufo.snmp.DesKey","title":"<code>DesKey</code>","text":"<p>               Bases: <code>BasePrivKey</code></p> <p>Des Key.</p>"},{"location":"reference/gufo/snmp/#gufo.snmp.Md5Key","title":"<code>Md5Key</code>","text":"<p>               Bases: <code>BaseAuthKey</code></p> <p>MD5 Key.</p>"},{"location":"reference/gufo/snmp/#gufo.snmp.Sha1Key","title":"<code>Sha1Key</code>","text":"<p>               Bases: <code>BaseAuthKey</code></p> <p>SHA-1 Key.</p>"},{"location":"reference/gufo/snmp/#gufo.snmp.SnmpSession","title":"<code>SnmpSession</code>","text":"<p>               Bases: <code>object</code></p> <p>SNMP client session.</p> <p>Should be used either directly or via asynchronous context manager.</p> <p>Parameters:</p> Name Type Description Default <code>addr</code> <code>str</code> <p>SNMP agent address, either IPv4 or IPv6.</p> required <code>port</code> <code>int</code> <p>SNMP agent port.</p> <code>161</code> <code>community</code> <code>str</code> <p>SNMP community (v1, v2c).</p> <code>'public'</code> <code>engine_id</code> <code>Optional[bytes]</code> <p>SNMP Engine id (v3).</p> <code>None</code> <code>user</code> <code>Optional[User]</code> <p>User instance (v3).</p> <code>None</code> <code>version</code> <code>Optional[SnmpVersion]</code> <p>Protocol version. Autodetect if omitted:</p> <ul> <li>v3: if <code>user</code> is set.</li> <li>v2c: otherwise.</li> </ul> <code>None</code> <code>timeout</code> <code>float</code> <p>Request timeout in seconds.</p> <code>10.0</code> <code>tos</code> <code>int</code> <p>Set ToS/DSCP mark on egress packets.</p> <code>0</code> <code>send_buffer</code> <code>int</code> <p>Send buffer size for UDP socket. 0 - use default size.</p> <code>0</code> <code>recv_buffer</code> <code>int</code> <p>Receive buffer size for UDP socket. 0 - use default size.</p> <code>0</code> <code>max_repetitions</code> <code>int</code> <p>Default max_repetitions for getbulk.</p> <code>20</code> <code>allow_bulk</code> <code>bool</code> <p>Allow using GETBULK in SnmpSession.fetch() whenever possible.</p> <code>True</code> <code>policer</code> <code>Optional[BasePolicer]</code> <p>Optional <code>BasePolicer</code> instance to limit outgoing requests. Overrides <code>limit_rps</code> parameter.</p> <code>None</code> <code>limit_rps</code> <code>Optional[Union[int, float]]</code> <p>Limit outgouing requests to <code>limit_rps</code> requests per second.</p> <code>None</code> Example <pre><code>session = SnmpSession(\"127.0.0.1\")\nr = await session.get(\"1.3.6.1.2.1.1.6.0\")\n</code></pre> Example <pre><code>async with SnmpSession(\"127.0.0.1\") as session:\n    r = await session.get(\"1.3.6.1.2.1.1.6.0\")\n</code></pre>"},{"location":"reference/gufo/snmp/#gufo.snmp.SnmpSession.__aenter__","title":"<code>__aenter__()</code>  <code>async</code>","text":"<p>Asynchronous context manager entry.</p>"},{"location":"reference/gufo/snmp/#gufo.snmp.SnmpSession.__aexit__","title":"<code>__aexit__(exc_type, exc_val, exc_tb)</code>  <code>async</code>","text":"<p>Asynchronous context manager exit.</p>"},{"location":"reference/gufo/snmp/#gufo.snmp.SnmpSession.fetch","title":"<code>fetch(oid)</code>","text":"<p>Iterate over oids using fastest method available.</p> <p>When SnmpSession's <code>allow_bulk</code> is set, use <code>SnmpSession.getbulk()</code> on SNMPv2, otherwise use <code>SnmpSession.getnext()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>oid</code> <code>str</code> <p>Starting oid</p> required <p>Returns:</p> Type Description <code>AsyncIterator[Tuple[str, ValueType]]</code> <p>Asynchronous iterator yielding pair of (oid, value)</p> Example <pre><code>async for oid, value in session.fetch(\"1.3.6\"):\n    print(oid, value)\n</code></pre>"},{"location":"reference/gufo/snmp/#gufo.snmp.SnmpSession.get","title":"<code>get(oid)</code>  <code>async</code>","text":"<p>Send SNMP GET request and await for response.</p> <p>Parameters:</p> Name Type Description Default <code>oid</code> <code>str</code> <p>OID in numeric format, no leading dot.</p> required <p>Returns:</p> Type Description <code>ValueType</code> <p>Request result. Return type depends on requested oid.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>On invalid oid format.</p> <code>OSError</code> <p>When unable to send request.</p> <code>TimeoutError</code> <p>When timed out.</p> <code>NoSuchInstance</code> <p>When requested key is not found.</p> <code>SnmpError</code> <p>On other SNMP-related errors.</p>"},{"location":"reference/gufo/snmp/#gufo.snmp.SnmpSession.get_engine_id","title":"<code>get_engine_id()</code>","text":"<p>Get effective engine id.</p> <p>Returns:</p> Type Description <code>bytes</code> <p>Engine id as bytes.</p>"},{"location":"reference/gufo/snmp/#gufo.snmp.SnmpSession.get_many","title":"<code>get_many(oids)</code>  <code>async</code>","text":"<p>Send SNMP GET request for multiple oids and await for response.</p> <p>Parameters:</p> Name Type Description Default <code>oids</code> <code>Iterable[str]</code> <p>Iterable of oids in numeric format, no leading dots.</p> required <p>Returns:</p> Type Description <code>Dict[str, ValueType]</code> <p>Dict where keys are requested oids, values are returned values.</p> <code>Dict[str, ValueType]</code> <p>Types of values are depends on requested oids.</p> Note <p>There is no guarante that all requested oids are present in result dict. Some values may be missed if not returned by agent.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>On invalid oid format.</p> <code>OSError</code> <p>When unable to send request.</p> <code>TimeoutError</code> <p>When timed out.</p> <code>RuntimeError</code> <p>On Python runtime failure.</p> <code>SnmpError</code> <p>On other SNMP-related errors.</p>"},{"location":"reference/gufo/snmp/#gufo.snmp.SnmpSession.getbulk","title":"<code>getbulk(oid, max_repetitions=None)</code>","text":"<p>Iterate over oids.</p> <p>Parameters:</p> Name Type Description Default <code>oid</code> <code>str</code> <p>Starting oid</p> required <code>max_repetitions</code> <code>Optional[int]</code> <p>Maximal amount of items per response. Override the SnmpSession's defaults.</p> <code>None</code> <p>Returns:</p> Type Description <code>AsyncIterator[Tuple[str, ValueType]]</code> <p>Asynchronous iterator yielding pair of (oid, value)</p> Example <pre><code>async for oid, value in session.getbulk(\"1.3.6\"):\n    print(oid, value)\n</code></pre>"},{"location":"reference/gufo/snmp/#gufo.snmp.SnmpSession.getnext","title":"<code>getnext(oid)</code>","text":"<p>Iterate over oids.</p> <p>Parameters:</p> Name Type Description Default <code>oid</code> <code>str</code> <p>Starting oid</p> required <p>Returns:</p> Type Description <code>AsyncIterator[Tuple[str, ValueType]]</code> <p>Asynchronous iterator yielding pair of (oid, value)</p> Example <pre><code>async for oid, value in session.getnext(\"1.3.6\"):\n    print(oid, value)\n</code></pre>"},{"location":"reference/gufo/snmp/#gufo.snmp.SnmpSession.refresh","title":"<code>refresh()</code>  <code>async</code>","text":"<p>Send and receive REPORT to refresh authentication state.</p> <p>SNMPv3 only.</p> <p>Refresh sent automatically on entering the SnmpSession and should be resent manually if over 150 seconds left from the last request.</p>"},{"location":"reference/gufo/snmp/#gufo.snmp.SnmpVersion","title":"<code>SnmpVersion</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>SNMP protocol version.</p>"},{"location":"reference/gufo/snmp/#gufo.snmp.User","title":"<code>User</code>","text":"<p>               Bases: <code>object</code></p> <p>SNMPv3 user.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>user name.</p> required <code>auth_key</code> <code>Optional[BaseAuthKey]</code> <p>Optional authentication key.</p> <code>None</code> <code>priv_key</code> <code>Optional[BasePrivKey]</code> <p>Optional privacy key.</p> <code>None</code>"},{"location":"reference/gufo/snmp/#gufo.snmp.User.snmpd_create_user","title":"<code>snmpd_create_user</code>  <code>property</code>","text":"<p>CreateUser part of snmpd.conf.</p> <p>Returns:</p> Type Description <code>str</code> <p>createUser configuration directive.</p>"},{"location":"reference/gufo/snmp/#gufo.snmp.User.snmpd_rouser","title":"<code>snmpd_rouser</code>  <code>property</code>","text":"<p><code>rouser</code> part of snmpd.conf.</p> <p>Returns:</p> Type Description <code>str</code> <p>rouser configuration directive.</p>"},{"location":"reference/gufo/snmp/#gufo.snmp.User.__repr__","title":"<code>__repr__()</code>","text":"<p>repr() implementation.</p>"},{"location":"reference/gufo/snmp/#gufo.snmp.User.__str__","title":"<code>__str__()</code>","text":"<p>str() implementation.</p>"},{"location":"reference/gufo/snmp/#gufo.snmp.User.default","title":"<code>default()</code>  <code>classmethod</code>","text":"<p>Default user without name and keys.</p> <p>Returns:</p> Type Description <code>User</code> <p>Default user instance.</p>"},{"location":"reference/gufo/snmp/#gufo.snmp.User.get_auth_alg","title":"<code>get_auth_alg()</code>","text":"<p>Auth algorithm index with key type mask.</p> Algorithms <ul> <li>0 - No auth</li> <li>1 - MD5</li> <li>2 - SHA1</li> </ul> <p>KeyType.mask applied</p>"},{"location":"reference/gufo/snmp/#gufo.snmp.User.get_auth_key","title":"<code>get_auth_key()</code>","text":"<p>Authentication key.</p>"},{"location":"reference/gufo/snmp/#gufo.snmp.User.get_priv_alg","title":"<code>get_priv_alg()</code>","text":"<p>Privacy algorithm index.</p> Algorithms <ul> <li>0 - No privacy</li> <li>1 - DES</li> <li>2 - AES-128</li> </ul> <p>KeyType.mask applied</p>"},{"location":"reference/gufo/snmp/#gufo.snmp.User.get_priv_key","title":"<code>get_priv_key()</code>","text":"<p>Privacy key.</p>"},{"location":"reference/gufo/snmp/#gufo.snmp.User.require_auth","title":"<code>require_auth()</code>","text":"<p>Chech if user requires authentication.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True, if user requires authetication</p>"},{"location":"reference/gufo/snmp/cli/","title":"gufo.snmp.cli","text":"<p>gufo-snmp command.</p> <p>Attributes:</p> Name Type Description <code>NAME</code> <p>Utility's name.</p>"},{"location":"reference/gufo/snmp/cli/#gufo.snmp.cli.Cli","title":"<code>Cli</code>","text":"<p>               Bases: <code>object</code></p> <p><code>gufo-snmp</code> utility class.</p>"},{"location":"reference/gufo/snmp/cli/#gufo.snmp.cli.Cli.die","title":"<code>die(msg=None)</code>  <code>classmethod</code>","text":"<p>Die with message.</p>"},{"location":"reference/gufo/snmp/cli/#gufo.snmp.cli.Cli.get_command","title":"<code>get_command(ns)</code>","text":"<p>Get command from arguments.</p> <p>Parameters:</p> Name Type Description Default <code>ns</code> <code>Namespace</code> <p>Parsed namespace.</p> required <p>Returns:</p> Type Description <code>Command</code> <p>Parsed command.</p>"},{"location":"reference/gufo/snmp/cli/#gufo.snmp.cli.Cli.get_community","title":"<code>get_community(ns)</code>","text":"<p>Get SNMP community from arguments.</p> <p>Parameters:</p> Name Type Description Default <code>ns</code> <code>Namespace</code> <p>Parsed namespace.</p> required <p>Returns:</p> Type Description <code>str</code> <p>SNMP community</p>"},{"location":"reference/gufo/snmp/cli/#gufo.snmp.cli.Cli.get_session","title":"<code>get_session(ns)</code>","text":"<p>Construct SnmpSession from args.</p> <p>Parameters:</p> Name Type Description Default <code>ns</code> <code>Namespace</code> <p>Parsed namespace.</p> required <p>Returns:</p> Type Description <code>SnmpSession</code> <p>SnmpSession</p>"},{"location":"reference/gufo/snmp/cli/#gufo.snmp.cli.Cli.get_user","title":"<code>get_user(ns)</code>","text":"<p>Get USM configuration from arguments.</p> <p>Parameters:</p> Name Type Description Default <code>ns</code> <code>Namespace</code> <p>Parsed namespace.</p> required <p>Returns:</p> Type Description <code>User</code> <p>USM configuration</p>"},{"location":"reference/gufo/snmp/cli/#gufo.snmp.cli.Cli.get_version","title":"<code>get_version(ns)</code>","text":"<p>Parse SNMP version from arguments.</p> <p>Parameters:</p> Name Type Description Default <code>ns</code> <code>Namespace</code> <p>Parsed namespace.</p> required <p>Returns:</p> Type Description <code>SnmpVersion</code> <p>Protocol version</p>"},{"location":"reference/gufo/snmp/cli/#gufo.snmp.cli.Cli.is_valid_oid","title":"<code>is_valid_oid(oid)</code>  <code>classmethod</code>","text":"<p>Check oid is valid.</p> <p>Parameters:</p> Name Type Description Default <code>oid</code> <code>str</code> <p>Object id as string.</p> required <p>Returns:</p> Name Type Description <code>True</code> <code>bool</code> <p>if oid is valid.</p> <code>False</code> <code>bool</code> <p>otherwise.</p>"},{"location":"reference/gufo/snmp/cli/#gufo.snmp.cli.Cli.parse_args","title":"<code>parse_args(args)</code>  <code>classmethod</code>","text":"<p>Parse arguments.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>List[str]</code> <p>Arguments list.</p> required <p>Returns:</p> Type Description <code>Namespace</code> <p>Parsed namespace.</p>"},{"location":"reference/gufo/snmp/cli/#gufo.snmp.cli.Cli.run","title":"<code>run(args)</code>","text":"<p>Parse command-line arguments and run appropriative command.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>List[str]</code> <p>List of command-line arguments</p> required <p>Returns:     ExitCode</p>"},{"location":"reference/gufo/snmp/cli/#gufo.snmp.cli.Cli.run_get","title":"<code>run_get(session, oids, formatter)</code>","text":"<p>Perform GET request.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>SnmpSession</code> <p>Configured session.</p> required <code>oids</code> <code>List[str]</code> <p>List of oid, we must be sure, only one is used.</p> required <code>formatter</code> <code>Formatter</code> <p>Formatter instance.</p> required"},{"location":"reference/gufo/snmp/cli/#gufo.snmp.cli.Cli.run_get_many","title":"<code>run_get_many(session, oids, formatter)</code>","text":"<p>Perform multi-value GET request.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>SnmpSession</code> <p>Configured session.</p> required <code>oids</code> <code>List[str]</code> <p>List of oids.</p> required <code>formatter</code> <code>Formatter</code> <p>Formatter instance.</p> required"},{"location":"reference/gufo/snmp/cli/#gufo.snmp.cli.Cli.run_getbulk","title":"<code>run_getbulk(session, oids, formatter)</code>","text":"<p>Perform GETBULK.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>SnmpSession</code> <p>Configured session.</p> required <code>oids</code> <code>List[str]</code> <p>List of oids.</p> required <code>formatter</code> <code>Formatter</code> <p>Formatter instance.</p> required"},{"location":"reference/gufo/snmp/cli/#gufo.snmp.cli.Cli.run_getnext","title":"<code>run_getnext(session, oids, formatter)</code>","text":"<p>Perform GETNEXT.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>SnmpSession</code> <p>Configured session.</p> required <code>oids</code> <code>List[str]</code> <p>List of oids.</p> required <code>formatter</code> <code>Formatter</code> <p>Formatter instance.</p> required"},{"location":"reference/gufo/snmp/cli/#gufo.snmp.cli.CollectOFlags","title":"<code>CollectOFlags</code>","text":"<p>               Bases: <code>Action</code></p> <p>Argparse action for collecting multiple -O option flags.</p> <p>This action mimics the behavior of Net-SNMP's <code>-O</code> option, which can be specified multiple times (e.g., <code>-On -Oq -Ov</code>) or combined in a single token (e.g., <code>-Onqv</code>). Each occurrence contributes its flag characters to a set stored in the destination attribute.</p>"},{"location":"reference/gufo/snmp/cli/#gufo.snmp.cli.CollectOFlags.__call__","title":"<code>__call__(parser, namespace, values, option_string=None)</code>","text":"<p>Process a single -O argument occurrence.</p> <p>Each time the -O option is encountered, this method extracts the individual flag characters from values and merges them into the destination attribute (a set of characters). Duplicate flags are ignored automatically.</p> <p>Parameters:</p> Name Type Description Default <code>parser</code> <code>ArgumentParser</code> <p>The argument parser invoking this action.</p> required <code>namespace</code> <code>Namespace</code> <p>The namespace object where parsed values are stored.</p> required <code>values</code> <code>Union[str, Sequence[Any], None]</code> <p>The string of flag characters passed to -O (e.g., \"nqv\" for <code>-Onqv</code>).</p> required <code>option_string</code> <code>Optional[str]</code> <p>The option string that triggered this action, e.g., \"-O\" (may be None when called programmatically).</p> <code>None</code>"},{"location":"reference/gufo/snmp/cli/#gufo.snmp.cli.Command","title":"<code>Command</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Command to execute.</p>"},{"location":"reference/gufo/snmp/cli/#gufo.snmp.cli.ExitCode","title":"<code>ExitCode</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Cli exit codes.</p> <p>Attributes:</p> Name Type Description <code>OK</code> <p>Successful exit.</p> <code>ERR</code> <p>Error.</p>"},{"location":"reference/gufo/snmp/cli/#gufo.snmp.cli.Formatter","title":"<code>Formatter</code>","text":"<p>               Bases: <code>object</code></p> <p>Pretty format output.</p>"},{"location":"reference/gufo/snmp/cli/#gufo.snmp.cli.Formatter.format","title":"<code>format(oid, value)</code>","text":"<p>Format line.</p>"},{"location":"reference/gufo/snmp/cli/#gufo.snmp.cli.Formatter.format_value","title":"<code>format_value(value)</code>","text":"<p>Format value.</p>"},{"location":"reference/gufo/snmp/cli/#gufo.snmp.cli.Formatter.from_opts","title":"<code>from_opts(opts)</code>  <code>classmethod</code>","text":"<p>Build formatter from options.</p>"},{"location":"reference/gufo/snmp/cli/#gufo.snmp.cli.Formatter.validate","title":"<code>validate(parser, opts)</code>  <code>classmethod</code>","text":"<p>Check options.</p>"},{"location":"reference/gufo/snmp/cli/#gufo.snmp.cli.StrFormat","title":"<code>StrFormat</code>","text":"<p>               Bases: <code>Enum</code></p> <p>OctetString formatters.</p> <p>Attributes:</p> Name Type Description <code>REPR</code> <p>Using python's repr().</p> <code>ASCII</code> <p>Show printable ASCII symbols, replacing others with dots.</p> <code>HEX</code> <p>Hex-dump.</p> <code>ASCII_HEX</code> <p>ASCII + HEX</p>"},{"location":"reference/gufo/snmp/cli/#gufo.snmp.cli.StrFormat.default","title":"<code>default()</code>  <code>classmethod</code>","text":"<p>Get default value.</p>"},{"location":"reference/gufo/snmp/cli/#gufo.snmp.cli.main","title":"<code>main(args=None)</code>","text":"<p>Run <code>gufo-ping</code> with command-line arguments.</p>"},{"location":"reference/gufo/snmp/policer/","title":"gufo.snmp.policer","text":"<p>Policer abstract base class and the implementations.</p>"},{"location":"reference/gufo/snmp/policer/#gufo.snmp.policer.BasePolicer","title":"<code>BasePolicer</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Base query policer.</p> <p>Query policer limits the rate of outgoing GET/GETNEXT/GETBULK queries up to the desired rate.</p> <p>This is abstract class, the real implemetation must be defined in subclasses.</p> <p>The instances of the subclasses can be used as SnmpSession.policer parameters.</p>"},{"location":"reference/gufo/snmp/policer/#gufo.snmp.policer.BasePolicer.get_timeout","title":"<code>get_timeout(ts)</code>  <code>abstractmethod</code>","text":"<p>Get sleep timeout.</p> <p>Calculate next sleep timeout and adjust the internal state. Separate function for the testing purposes.</p> <p>Parameters:</p> Name Type Description Default <code>ts</code> <code>int</code> <p>Result of perf_counter_ns()</p> required <p>Returns:</p> Type Description <code>Optional[int]</code> <ul> <li>None, if the call is not policed.</li> </ul> <code>Optional[int]</code> <ul> <li>sleep timeout in nanoseconds, otherwise.</li> </ul>"},{"location":"reference/gufo/snmp/policer/#gufo.snmp.policer.BasePolicer.wait","title":"<code>wait()</code>  <code>async</code>","text":"<p>Apply policy.</p> <p>Waits until the sending of the next request will be possible according to the policy.</p> <p>May be interrupted by TimeoutError.</p>"},{"location":"reference/gufo/snmp/policer/#gufo.snmp.policer.BasePolicer.wait_sync","title":"<code>wait_sync()</code>","text":"<p>Apply policy  (Synchronous version).</p> <p>Waits until the sending of the next request will be possible according to the policy.</p> <p>May be interrupted by TimeoutError.</p>"},{"location":"reference/gufo/snmp/policer/#gufo.snmp.policer.RPSPolicer","title":"<code>RPSPolicer</code>","text":"<p>               Bases: <code>BasePolicer</code></p> <p>Requests per seconds policer.</p> <p>Aligns queries up to <code>rps</code> requests per seconds and tries to arrange queries to the equal intervals.</p> <p>Parameters:</p> Name Type Description Default <code>rps</code> <code>float</code> <p>Requests per second rate.</p> required"},{"location":"reference/gufo/snmp/policer/#gufo.snmp.policer.RPSPolicer.get_timeout","title":"<code>get_timeout(ts)</code>","text":"<p>Get sleep timeout.</p> <p>Calculate next sleep timeout and adjust the internal state. Separate function for the testing purposes.</p> <p>Parameters:</p> Name Type Description Default <code>ts</code> <code>int</code> <p>Result of perf_counter_ns()</p> required <p>Returns:</p> Type Description <code>Optional[int]</code> <ul> <li>None, if the call is not policed.</li> </ul> <code>Optional[int]</code> <ul> <li>sleep timeout in nanoseconds, otherwise.</li> </ul>"},{"location":"reference/gufo/snmp/protocol/","title":"gufo.snmp.protocol","text":""},{"location":"reference/gufo/snmp/snmpd/","title":"gufo.snmp.snmpd","text":"<p>snmpd context manager.</p>"},{"location":"reference/gufo/snmp/snmpd/#gufo.snmp.snmpd.Snmpd","title":"<code>Snmpd</code>","text":"<p>               Bases: <code>object</code></p> <p>snmpd context manager for testing.</p> <p>The context manager running snmpd instance for testing purposes. Requires Net-SNMP to be installed.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Optional[str]</code> <p>snmpd path.</p> <code>None</code> <code>address</code> <code>str</code> <p>Address to listen.</p> <code>'127.0.0.1'</code> <code>port</code> <code>int</code> <p>Port to listen.</p> <code>10161</code> <code>community</code> <code>str</code> <p>SNMP v1/v2c community.</p> <code>'public'</code> <code>location</code> <code>str</code> <p>sysLocation value.</p> <code>'Test'</code> <code>contact</code> <code>str</code> <p>sysContact value.</p> <code>'test &lt;test@example.com&gt;'</code> <code>engine_id</code> <code>Optional[str]</code> <p>Optional explicit engine id for SNMPv3. Use generated value if not set.</p> <code>None</code> <code>users</code> <code>Optional[List[User]]</code> <p>Optional list of SNMPv3 users.</p> <code>None</code> <code>start_timeout</code> <code>float</code> <p>Maximum time to wait for snmpd to start.</p> <code>5.0</code> <code>verbose</code> <code>bool</code> <p>Verbose output.</p> <code>False</code> <code>log_packets</code> <code>bool</code> <p>Log SNMP requests and responses, available only with <code>verbose</code> option.</p> <code>False</code> <p>Attributes:</p> Name Type Description <code>version</code> <code>Optional[str]</code> <p>Net-SNMP version.</p> <code>engine_id</code> <p>SNMPv3 engine id.</p> Note <p>Using the ports below 1024 usually requires the root priveleges.</p> Example <pre><code>with Snmpd():\n    # Any Gufo SNMP code\n</code></pre> Example <pre><code>async with Snmpd():\n    # Any Gufo SNMP code\n</code></pre>"},{"location":"reference/gufo/snmp/snmpd/#gufo.snmp.snmpd.Snmpd.address","title":"<code>address</code>  <code>property</code>","text":"<p>Get listen address.</p>"},{"location":"reference/gufo/snmp/snmpd/#gufo.snmp.snmpd.Snmpd.port","title":"<code>port</code>  <code>property</code>","text":"<p>Get listen port.</p>"},{"location":"reference/gufo/snmp/snmpd/#gufo.snmp.snmpd.Snmpd.__aenter__","title":"<code>__aenter__()</code>  <code>async</code>","text":"<p>Asynchronous context manager entry.</p>"},{"location":"reference/gufo/snmp/snmpd/#gufo.snmp.snmpd.Snmpd.__aexit__","title":"<code>__aexit__(exc_type, exc_val, exc_tb)</code>  <code>async</code>","text":"<p>Asynchronous context manager exit.</p>"},{"location":"reference/gufo/snmp/snmpd/#gufo.snmp.snmpd.Snmpd.__enter__","title":"<code>__enter__()</code>","text":"<p>Context manager entry.</p>"},{"location":"reference/gufo/snmp/snmpd/#gufo.snmp.snmpd.Snmpd.__exit__","title":"<code>__exit__(exc_type, exc_val, exc_tb)</code>","text":"<p>Context manager exit.</p>"},{"location":"reference/gufo/snmp/snmpd/#gufo.snmp.snmpd.Snmpd.get_config","title":"<code>get_config()</code>","text":"<p>Generate snmpd config.</p> <p>Returns:</p> Type Description <code>str</code> <p>snmpd configuration.</p>"},{"location":"reference/gufo/snmp/typing/","title":"gufo.snmp.typing","text":"<p>Types definition.</p> <p>Attributes:</p> Name Type Description <code>ValueType</code> <p>Return type for SNMP query operations.</p>"},{"location":"reference/gufo/snmp/user/","title":"gufo.snmp.user","text":"<p>User structure definition.</p>"},{"location":"reference/gufo/snmp/user/#gufo.snmp.user.Aes128Key","title":"<code>Aes128Key</code>","text":"<p>               Bases: <code>BasePrivKey</code></p> <p>AES-128 Key.</p>"},{"location":"reference/gufo/snmp/user/#gufo.snmp.user.BaseAuthKey","title":"<code>BaseAuthKey</code>","text":"<p>               Bases: <code>BaseKey</code></p> <p>Authentication key base class.</p>"},{"location":"reference/gufo/snmp/user/#gufo.snmp.user.BaseKey","title":"<code>BaseKey</code>","text":"<p>               Bases: <code>object</code></p> <p>Basic key class.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>bytes</code> <p>Key value.</p> required <code>key_type</code> <code>KeyType</code> <p>Key type.</p> <code>Password</code>"},{"location":"reference/gufo/snmp/user/#gufo.snmp.user.BaseKey.get_localized_key","title":"<code>get_localized_key(master_key, engine_id)</code>  <code>classmethod</code>","text":"<p>Convert master key to localized key.</p> <p>Parameters:</p> Name Type Description Default <code>master_key</code> <code>bytes</code> <p>Master key, must have size according to algorithm.</p> required <code>engine_id</code> <code>bytes</code> <p>SNMP engine id.</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>Localized key. Resulting length same as master_key.</p>"},{"location":"reference/gufo/snmp/user/#gufo.snmp.user.BaseKey.get_master_key","title":"<code>get_master_key(passwd)</code>  <code>classmethod</code>","text":"<p>Convert password to master key.</p> <p>Parameters:</p> Name Type Description Default <code>passwd</code> <code>bytes</code> <p>Password</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>Master key. Resulting length depends on the algorithm.</p>"},{"location":"reference/gufo/snmp/user/#gufo.snmp.user.BaseKey.snmpd_key","title":"<code>snmpd_key()</code>","text":"<p>Returns key and prefix for createUser.</p>"},{"location":"reference/gufo/snmp/user/#gufo.snmp.user.BasePrivKey","title":"<code>BasePrivKey</code>","text":"<p>               Bases: <code>BaseKey</code></p> <p>Privacy key base class.</p>"},{"location":"reference/gufo/snmp/user/#gufo.snmp.user.DesKey","title":"<code>DesKey</code>","text":"<p>               Bases: <code>BasePrivKey</code></p> <p>Des Key.</p>"},{"location":"reference/gufo/snmp/user/#gufo.snmp.user.KeyType","title":"<code>KeyType</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Key type.</p> <p>Attributes:</p> Name Type Description <code>Password</code> <p>Raw password (least security).</p> <code>Master</code> <p>Master key (hashed password).</p> <code>Localized</code> <p>Localized key, mixed with engine id.</p>"},{"location":"reference/gufo/snmp/user/#gufo.snmp.user.KeyType.is_localized","title":"<code>is_localized</code>  <code>property</code>","text":"<p>Check if key type is localized.</p>"},{"location":"reference/gufo/snmp/user/#gufo.snmp.user.KeyType.is_master","title":"<code>is_master</code>  <code>property</code>","text":"<p>Check if key type is a master.</p>"},{"location":"reference/gufo/snmp/user/#gufo.snmp.user.KeyType.is_password","title":"<code>is_password</code>  <code>property</code>","text":"<p>Check if key type is a password.</p>"},{"location":"reference/gufo/snmp/user/#gufo.snmp.user.KeyType.snmpd_option","title":"<code>snmpd_option()</code>","text":"<p>Get key option for snmpd.conf.</p> <p>Returns:</p> Type Description <code>str</code> <p>Key type prefix like -m, -l, ...</p>"},{"location":"reference/gufo/snmp/user/#gufo.snmp.user.Md5Key","title":"<code>Md5Key</code>","text":"<p>               Bases: <code>BaseAuthKey</code></p> <p>MD5 Key.</p>"},{"location":"reference/gufo/snmp/user/#gufo.snmp.user.Sha1Key","title":"<code>Sha1Key</code>","text":"<p>               Bases: <code>BaseAuthKey</code></p> <p>SHA-1 Key.</p>"},{"location":"reference/gufo/snmp/user/#gufo.snmp.user.User","title":"<code>User</code>","text":"<p>               Bases: <code>object</code></p> <p>SNMPv3 user.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>user name.</p> required <code>auth_key</code> <code>Optional[BaseAuthKey]</code> <p>Optional authentication key.</p> <code>None</code> <code>priv_key</code> <code>Optional[BasePrivKey]</code> <p>Optional privacy key.</p> <code>None</code>"},{"location":"reference/gufo/snmp/user/#gufo.snmp.user.User.snmpd_create_user","title":"<code>snmpd_create_user</code>  <code>property</code>","text":"<p>CreateUser part of snmpd.conf.</p> <p>Returns:</p> Type Description <code>str</code> <p>createUser configuration directive.</p>"},{"location":"reference/gufo/snmp/user/#gufo.snmp.user.User.snmpd_rouser","title":"<code>snmpd_rouser</code>  <code>property</code>","text":"<p><code>rouser</code> part of snmpd.conf.</p> <p>Returns:</p> Type Description <code>str</code> <p>rouser configuration directive.</p>"},{"location":"reference/gufo/snmp/user/#gufo.snmp.user.User.__repr__","title":"<code>__repr__()</code>","text":"<p>repr() implementation.</p>"},{"location":"reference/gufo/snmp/user/#gufo.snmp.user.User.__str__","title":"<code>__str__()</code>","text":"<p>str() implementation.</p>"},{"location":"reference/gufo/snmp/user/#gufo.snmp.user.User.default","title":"<code>default()</code>  <code>classmethod</code>","text":"<p>Default user without name and keys.</p> <p>Returns:</p> Type Description <code>User</code> <p>Default user instance.</p>"},{"location":"reference/gufo/snmp/user/#gufo.snmp.user.User.get_auth_alg","title":"<code>get_auth_alg()</code>","text":"<p>Auth algorithm index with key type mask.</p> Algorithms <ul> <li>0 - No auth</li> <li>1 - MD5</li> <li>2 - SHA1</li> </ul> <p>KeyType.mask applied</p>"},{"location":"reference/gufo/snmp/user/#gufo.snmp.user.User.get_auth_key","title":"<code>get_auth_key()</code>","text":"<p>Authentication key.</p>"},{"location":"reference/gufo/snmp/user/#gufo.snmp.user.User.get_priv_alg","title":"<code>get_priv_alg()</code>","text":"<p>Privacy algorithm index.</p> Algorithms <ul> <li>0 - No privacy</li> <li>1 - DES</li> <li>2 - AES-128</li> </ul> <p>KeyType.mask applied</p>"},{"location":"reference/gufo/snmp/user/#gufo.snmp.user.User.get_priv_key","title":"<code>get_priv_key()</code>","text":"<p>Privacy key.</p>"},{"location":"reference/gufo/snmp/user/#gufo.snmp.user.User.require_auth","title":"<code>require_auth()</code>","text":"<p>Chech if user requires authentication.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True, if user requires authetication</p>"},{"location":"reference/gufo/snmp/version/","title":"gufo.snmp.version","text":"<p>SnmpVersion definition.</p>"},{"location":"reference/gufo/snmp/version/#gufo.snmp.version.SnmpVersion","title":"<code>SnmpVersion</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>SNMP protocol version.</p>"},{"location":"reference/gufo/snmp/async_client/","title":"gufo.snmp.async_client","text":"<p>Async SnmpSession.</p>"},{"location":"reference/gufo/snmp/async_client/#gufo.snmp.async_client.SnmpSession","title":"<code>SnmpSession</code>","text":"<p>               Bases: <code>object</code></p> <p>SNMP client session.</p> <p>Should be used either directly or via asynchronous context manager.</p> <p>Parameters:</p> Name Type Description Default <code>addr</code> <code>str</code> <p>SNMP agent address, either IPv4 or IPv6.</p> required <code>port</code> <code>int</code> <p>SNMP agent port.</p> <code>161</code> <code>community</code> <code>str</code> <p>SNMP community (v1, v2c).</p> <code>'public'</code> <code>engine_id</code> <code>Optional[bytes]</code> <p>SNMP Engine id (v3).</p> <code>None</code> <code>user</code> <code>Optional[User]</code> <p>User instance (v3).</p> <code>None</code> <code>version</code> <code>Optional[SnmpVersion]</code> <p>Protocol version. Autodetect if omitted:</p> <ul> <li>v3: if <code>user</code> is set.</li> <li>v2c: otherwise.</li> </ul> <code>None</code> <code>timeout</code> <code>float</code> <p>Request timeout in seconds.</p> <code>10.0</code> <code>tos</code> <code>int</code> <p>Set ToS/DSCP mark on egress packets.</p> <code>0</code> <code>send_buffer</code> <code>int</code> <p>Send buffer size for UDP socket. 0 - use default size.</p> <code>0</code> <code>recv_buffer</code> <code>int</code> <p>Receive buffer size for UDP socket. 0 - use default size.</p> <code>0</code> <code>max_repetitions</code> <code>int</code> <p>Default max_repetitions for getbulk.</p> <code>20</code> <code>allow_bulk</code> <code>bool</code> <p>Allow using GETBULK in SnmpSession.fetch() whenever possible.</p> <code>True</code> <code>policer</code> <code>Optional[BasePolicer]</code> <p>Optional <code>BasePolicer</code> instance to limit outgoing requests. Overrides <code>limit_rps</code> parameter.</p> <code>None</code> <code>limit_rps</code> <code>Optional[Union[int, float]]</code> <p>Limit outgouing requests to <code>limit_rps</code> requests per second.</p> <code>None</code> Example <pre><code>session = SnmpSession(\"127.0.0.1\")\nr = await session.get(\"1.3.6.1.2.1.1.6.0\")\n</code></pre> Example <pre><code>async with SnmpSession(\"127.0.0.1\") as session:\n    r = await session.get(\"1.3.6.1.2.1.1.6.0\")\n</code></pre>"},{"location":"reference/gufo/snmp/async_client/#gufo.snmp.async_client.SnmpSession.__aenter__","title":"<code>__aenter__()</code>  <code>async</code>","text":"<p>Asynchronous context manager entry.</p>"},{"location":"reference/gufo/snmp/async_client/#gufo.snmp.async_client.SnmpSession.__aexit__","title":"<code>__aexit__(exc_type, exc_val, exc_tb)</code>  <code>async</code>","text":"<p>Asynchronous context manager exit.</p>"},{"location":"reference/gufo/snmp/async_client/#gufo.snmp.async_client.SnmpSession.fetch","title":"<code>fetch(oid)</code>","text":"<p>Iterate over oids using fastest method available.</p> <p>When SnmpSession's <code>allow_bulk</code> is set, use <code>SnmpSession.getbulk()</code> on SNMPv2, otherwise use <code>SnmpSession.getnext()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>oid</code> <code>str</code> <p>Starting oid</p> required <p>Returns:</p> Type Description <code>AsyncIterator[Tuple[str, ValueType]]</code> <p>Asynchronous iterator yielding pair of (oid, value)</p> Example <pre><code>async for oid, value in session.fetch(\"1.3.6\"):\n    print(oid, value)\n</code></pre>"},{"location":"reference/gufo/snmp/async_client/#gufo.snmp.async_client.SnmpSession.get","title":"<code>get(oid)</code>  <code>async</code>","text":"<p>Send SNMP GET request and await for response.</p> <p>Parameters:</p> Name Type Description Default <code>oid</code> <code>str</code> <p>OID in numeric format, no leading dot.</p> required <p>Returns:</p> Type Description <code>ValueType</code> <p>Request result. Return type depends on requested oid.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>On invalid oid format.</p> <code>OSError</code> <p>When unable to send request.</p> <code>TimeoutError</code> <p>When timed out.</p> <code>NoSuchInstance</code> <p>When requested key is not found.</p> <code>SnmpError</code> <p>On other SNMP-related errors.</p>"},{"location":"reference/gufo/snmp/async_client/#gufo.snmp.async_client.SnmpSession.get_engine_id","title":"<code>get_engine_id()</code>","text":"<p>Get effective engine id.</p> <p>Returns:</p> Type Description <code>bytes</code> <p>Engine id as bytes.</p>"},{"location":"reference/gufo/snmp/async_client/#gufo.snmp.async_client.SnmpSession.get_many","title":"<code>get_many(oids)</code>  <code>async</code>","text":"<p>Send SNMP GET request for multiple oids and await for response.</p> <p>Parameters:</p> Name Type Description Default <code>oids</code> <code>Iterable[str]</code> <p>Iterable of oids in numeric format, no leading dots.</p> required <p>Returns:</p> Type Description <code>Dict[str, ValueType]</code> <p>Dict where keys are requested oids, values are returned values.</p> <code>Dict[str, ValueType]</code> <p>Types of values are depends on requested oids.</p> Note <p>There is no guarante that all requested oids are present in result dict. Some values may be missed if not returned by agent.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>On invalid oid format.</p> <code>OSError</code> <p>When unable to send request.</p> <code>TimeoutError</code> <p>When timed out.</p> <code>RuntimeError</code> <p>On Python runtime failure.</p> <code>SnmpError</code> <p>On other SNMP-related errors.</p>"},{"location":"reference/gufo/snmp/async_client/#gufo.snmp.async_client.SnmpSession.getbulk","title":"<code>getbulk(oid, max_repetitions=None)</code>","text":"<p>Iterate over oids.</p> <p>Parameters:</p> Name Type Description Default <code>oid</code> <code>str</code> <p>Starting oid</p> required <code>max_repetitions</code> <code>Optional[int]</code> <p>Maximal amount of items per response. Override the SnmpSession's defaults.</p> <code>None</code> <p>Returns:</p> Type Description <code>AsyncIterator[Tuple[str, ValueType]]</code> <p>Asynchronous iterator yielding pair of (oid, value)</p> Example <pre><code>async for oid, value in session.getbulk(\"1.3.6\"):\n    print(oid, value)\n</code></pre>"},{"location":"reference/gufo/snmp/async_client/#gufo.snmp.async_client.SnmpSession.getnext","title":"<code>getnext(oid)</code>","text":"<p>Iterate over oids.</p> <p>Parameters:</p> Name Type Description Default <code>oid</code> <code>str</code> <p>Starting oid</p> required <p>Returns:</p> Type Description <code>AsyncIterator[Tuple[str, ValueType]]</code> <p>Asynchronous iterator yielding pair of (oid, value)</p> Example <pre><code>async for oid, value in session.getnext(\"1.3.6\"):\n    print(oid, value)\n</code></pre>"},{"location":"reference/gufo/snmp/async_client/#gufo.snmp.async_client.SnmpSession.refresh","title":"<code>refresh()</code>  <code>async</code>","text":"<p>Send and receive REPORT to refresh authentication state.</p> <p>SNMPv3 only.</p> <p>Refresh sent automatically on entering the SnmpSession and should be resent manually if over 150 seconds left from the last request.</p>"},{"location":"reference/gufo/snmp/async_client/client/","title":"gufo.snmp.async_client.client","text":"<p>SnmpSession implementation.</p>"},{"location":"reference/gufo/snmp/async_client/client/#gufo.snmp.async_client.client.GetBulkIter","title":"<code>GetBulkIter</code>","text":"<p>               Bases: <code>object</code></p> <p>Wrap the series of the GetBulk requests.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>SnmpSession</code> <p>Parent SnmpSession.</p> required <code>oid</code> <code>str</code> <p>Base oid.</p> required <code>max_repetitions</code> <code>int</code> <p>Max amount of iterms per response.</p> required"},{"location":"reference/gufo/snmp/async_client/client/#gufo.snmp.async_client.client.GetBulkIter.__aiter__","title":"<code>__aiter__()</code>","text":"<p>Return asynchronous iterator.</p>"},{"location":"reference/gufo/snmp/async_client/client/#gufo.snmp.async_client.client.GetBulkIter.__anext__","title":"<code>__anext__()</code>  <code>async</code>","text":"<p>Get next value.</p>"},{"location":"reference/gufo/snmp/async_client/client/#gufo.snmp.async_client.client.GetNextIter","title":"<code>GetNextIter</code>","text":"<p>               Bases: <code>object</code></p> <p>Wrap the series of the GetNext requests.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>SnmpSession</code> <p>Parent SnmpSession.</p> required <code>oid</code> <code>str</code> <p>Base oid.</p> required"},{"location":"reference/gufo/snmp/async_client/client/#gufo.snmp.async_client.client.GetNextIter.__aiter__","title":"<code>__aiter__()</code>","text":"<p>Return asynchronous iterator.</p>"},{"location":"reference/gufo/snmp/async_client/client/#gufo.snmp.async_client.client.GetNextIter.__anext__","title":"<code>__anext__()</code>  <code>async</code>","text":"<p>Get next value.</p>"},{"location":"reference/gufo/snmp/async_client/client/#gufo.snmp.async_client.client.SnmpSession","title":"<code>SnmpSession</code>","text":"<p>               Bases: <code>object</code></p> <p>SNMP client session.</p> <p>Should be used either directly or via asynchronous context manager.</p> <p>Parameters:</p> Name Type Description Default <code>addr</code> <code>str</code> <p>SNMP agent address, either IPv4 or IPv6.</p> required <code>port</code> <code>int</code> <p>SNMP agent port.</p> <code>161</code> <code>community</code> <code>str</code> <p>SNMP community (v1, v2c).</p> <code>'public'</code> <code>engine_id</code> <code>Optional[bytes]</code> <p>SNMP Engine id (v3).</p> <code>None</code> <code>user</code> <code>Optional[User]</code> <p>User instance (v3).</p> <code>None</code> <code>version</code> <code>Optional[SnmpVersion]</code> <p>Protocol version. Autodetect if omitted:</p> <ul> <li>v3: if <code>user</code> is set.</li> <li>v2c: otherwise.</li> </ul> <code>None</code> <code>timeout</code> <code>float</code> <p>Request timeout in seconds.</p> <code>10.0</code> <code>tos</code> <code>int</code> <p>Set ToS/DSCP mark on egress packets.</p> <code>0</code> <code>send_buffer</code> <code>int</code> <p>Send buffer size for UDP socket. 0 - use default size.</p> <code>0</code> <code>recv_buffer</code> <code>int</code> <p>Receive buffer size for UDP socket. 0 - use default size.</p> <code>0</code> <code>max_repetitions</code> <code>int</code> <p>Default max_repetitions for getbulk.</p> <code>20</code> <code>allow_bulk</code> <code>bool</code> <p>Allow using GETBULK in SnmpSession.fetch() whenever possible.</p> <code>True</code> <code>policer</code> <code>Optional[BasePolicer]</code> <p>Optional <code>BasePolicer</code> instance to limit outgoing requests. Overrides <code>limit_rps</code> parameter.</p> <code>None</code> <code>limit_rps</code> <code>Optional[Union[int, float]]</code> <p>Limit outgouing requests to <code>limit_rps</code> requests per second.</p> <code>None</code> Example <pre><code>session = SnmpSession(\"127.0.0.1\")\nr = await session.get(\"1.3.6.1.2.1.1.6.0\")\n</code></pre> Example <pre><code>async with SnmpSession(\"127.0.0.1\") as session:\n    r = await session.get(\"1.3.6.1.2.1.1.6.0\")\n</code></pre>"},{"location":"reference/gufo/snmp/async_client/client/#gufo.snmp.async_client.client.SnmpSession.__aenter__","title":"<code>__aenter__()</code>  <code>async</code>","text":"<p>Asynchronous context manager entry.</p>"},{"location":"reference/gufo/snmp/async_client/client/#gufo.snmp.async_client.client.SnmpSession.__aexit__","title":"<code>__aexit__(exc_type, exc_val, exc_tb)</code>  <code>async</code>","text":"<p>Asynchronous context manager exit.</p>"},{"location":"reference/gufo/snmp/async_client/client/#gufo.snmp.async_client.client.SnmpSession.fetch","title":"<code>fetch(oid)</code>","text":"<p>Iterate over oids using fastest method available.</p> <p>When SnmpSession's <code>allow_bulk</code> is set, use <code>SnmpSession.getbulk()</code> on SNMPv2, otherwise use <code>SnmpSession.getnext()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>oid</code> <code>str</code> <p>Starting oid</p> required <p>Returns:</p> Type Description <code>AsyncIterator[Tuple[str, ValueType]]</code> <p>Asynchronous iterator yielding pair of (oid, value)</p> Example <pre><code>async for oid, value in session.fetch(\"1.3.6\"):\n    print(oid, value)\n</code></pre>"},{"location":"reference/gufo/snmp/async_client/client/#gufo.snmp.async_client.client.SnmpSession.get","title":"<code>get(oid)</code>  <code>async</code>","text":"<p>Send SNMP GET request and await for response.</p> <p>Parameters:</p> Name Type Description Default <code>oid</code> <code>str</code> <p>OID in numeric format, no leading dot.</p> required <p>Returns:</p> Type Description <code>ValueType</code> <p>Request result. Return type depends on requested oid.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>On invalid oid format.</p> <code>OSError</code> <p>When unable to send request.</p> <code>TimeoutError</code> <p>When timed out.</p> <code>NoSuchInstance</code> <p>When requested key is not found.</p> <code>SnmpError</code> <p>On other SNMP-related errors.</p>"},{"location":"reference/gufo/snmp/async_client/client/#gufo.snmp.async_client.client.SnmpSession.get_engine_id","title":"<code>get_engine_id()</code>","text":"<p>Get effective engine id.</p> <p>Returns:</p> Type Description <code>bytes</code> <p>Engine id as bytes.</p>"},{"location":"reference/gufo/snmp/async_client/client/#gufo.snmp.async_client.client.SnmpSession.get_many","title":"<code>get_many(oids)</code>  <code>async</code>","text":"<p>Send SNMP GET request for multiple oids and await for response.</p> <p>Parameters:</p> Name Type Description Default <code>oids</code> <code>Iterable[str]</code> <p>Iterable of oids in numeric format, no leading dots.</p> required <p>Returns:</p> Type Description <code>Dict[str, ValueType]</code> <p>Dict where keys are requested oids, values are returned values.</p> <code>Dict[str, ValueType]</code> <p>Types of values are depends on requested oids.</p> Note <p>There is no guarante that all requested oids are present in result dict. Some values may be missed if not returned by agent.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>On invalid oid format.</p> <code>OSError</code> <p>When unable to send request.</p> <code>TimeoutError</code> <p>When timed out.</p> <code>RuntimeError</code> <p>On Python runtime failure.</p> <code>SnmpError</code> <p>On other SNMP-related errors.</p>"},{"location":"reference/gufo/snmp/async_client/client/#gufo.snmp.async_client.client.SnmpSession.getbulk","title":"<code>getbulk(oid, max_repetitions=None)</code>","text":"<p>Iterate over oids.</p> <p>Parameters:</p> Name Type Description Default <code>oid</code> <code>str</code> <p>Starting oid</p> required <code>max_repetitions</code> <code>Optional[int]</code> <p>Maximal amount of items per response. Override the SnmpSession's defaults.</p> <code>None</code> <p>Returns:</p> Type Description <code>AsyncIterator[Tuple[str, ValueType]]</code> <p>Asynchronous iterator yielding pair of (oid, value)</p> Example <pre><code>async for oid, value in session.getbulk(\"1.3.6\"):\n    print(oid, value)\n</code></pre>"},{"location":"reference/gufo/snmp/async_client/client/#gufo.snmp.async_client.client.SnmpSession.getnext","title":"<code>getnext(oid)</code>","text":"<p>Iterate over oids.</p> <p>Parameters:</p> Name Type Description Default <code>oid</code> <code>str</code> <p>Starting oid</p> required <p>Returns:</p> Type Description <code>AsyncIterator[Tuple[str, ValueType]]</code> <p>Asynchronous iterator yielding pair of (oid, value)</p> Example <pre><code>async for oid, value in session.getnext(\"1.3.6\"):\n    print(oid, value)\n</code></pre>"},{"location":"reference/gufo/snmp/async_client/client/#gufo.snmp.async_client.client.SnmpSession.refresh","title":"<code>refresh()</code>  <code>async</code>","text":"<p>Send and receive REPORT to refresh authentication state.</p> <p>SNMPv3 only.</p> <p>Refresh sent automatically on entering the SnmpSession and should be resent manually if over 150 seconds left from the last request.</p>"},{"location":"reference/gufo/snmp/sync_client/","title":"gufo.snmp.sync_client","text":"<p>Sync SnmpSession.</p>"},{"location":"reference/gufo/snmp/sync_client/#gufo.snmp.sync_client.SnmpSession","title":"<code>SnmpSession</code>","text":"<p>               Bases: <code>object</code></p> <p>Synchronous SNMP client session.</p> <p>Should be used either directly or via context manager.</p> <p>Parameters:</p> Name Type Description Default <code>addr</code> <code>str</code> <p>SNMP agent address, either IPv4 or IPv6.</p> required <code>port</code> <code>int</code> <p>SNMP agent port.</p> <code>161</code> <code>community</code> <code>str</code> <p>SNMP community (v1, v2c).</p> <code>'public'</code> <code>engine_id</code> <code>Optional[bytes]</code> <p>SNMP Engine id (v3).</p> <code>None</code> <code>user</code> <code>Optional[User]</code> <p>User instance (v3).</p> <code>None</code> <code>version</code> <code>Optional[SnmpVersion]</code> <p>Protocol version. Autodetect if omitted:</p> <ul> <li>v3: if <code>user</code> is set.</li> <li>v2c: otherwise.</li> </ul> <code>None</code> <code>timeout</code> <code>float</code> <p>Request timeout in seconds.</p> <code>10.0</code> <code>tos</code> <code>int</code> <p>Set ToS/DSCP mark on egress packets.</p> <code>0</code> <code>send_buffer</code> <code>int</code> <p>Send buffer size for UDP socket. 0 - use default size.</p> <code>0</code> <code>recv_buffer</code> <code>int</code> <p>Receive buffer size for UDP socket. 0 - use default size.</p> <code>0</code> <code>max_repetitions</code> <code>int</code> <p>Default max_repetitions for getbulk.</p> <code>20</code> <code>allow_bulk</code> <code>bool</code> <p>Allow using GETBULK in SnmpSession.fetch() whenever possible.</p> <code>True</code> <code>policer</code> <code>Optional[BasePolicer]</code> <p>Optional <code>BasePolicer</code> instance to limit outgoing requests. Overrides <code>limit_rps</code> parameter.</p> <code>None</code> <code>limit_rps</code> <code>Optional[Union[int, float]]</code> <p>Limit outgouing requests to <code>limit_rps</code> requests per second.</p> <code>None</code> Example <pre><code>session = SnmpSession(\"127.0.0.1\")\nr = await session.get(\"1.3.6.1.2.1.1.6.0\")\n</code></pre> Example <pre><code>async with SnmpSession(\"127.0.0.1\") as session:\n    r = await session.get(\"1.3.6.1.2.1.1.6.0\")\n</code></pre>"},{"location":"reference/gufo/snmp/sync_client/#gufo.snmp.sync_client.SnmpSession.__enter__","title":"<code>__enter__()</code>","text":"<p>Asynchronous context manager entry.</p>"},{"location":"reference/gufo/snmp/sync_client/#gufo.snmp.sync_client.SnmpSession.__exit__","title":"<code>__exit__(exc_type, exc_val, exc_tb)</code>","text":"<p>Asynchronous context manager exit.</p>"},{"location":"reference/gufo/snmp/sync_client/#gufo.snmp.sync_client.SnmpSession.fetch","title":"<code>fetch(oid)</code>","text":"<p>Iterate over oids using fastest method available.</p> <p>When SnmpSession's <code>allow_bulk</code> is set, use <code>SnmpSession.getbulk()</code> on SNMPv2, otherwise use <code>SnmpSession.getnext()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>oid</code> <code>str</code> <p>Starting oid</p> required <p>Returns:</p> Type Description <code>Iterator[Tuple[str, ValueType]]</code> <p>Asynchronous iterator yielding pair of (oid, value)</p> Example <pre><code>async for oid, value in session.fetch(\"1.3.6\"):\n    print(oid, value)\n</code></pre>"},{"location":"reference/gufo/snmp/sync_client/#gufo.snmp.sync_client.SnmpSession.get","title":"<code>get(oid)</code>","text":"<p>Send SNMP GET request and await for response.</p> <p>Parameters:</p> Name Type Description Default <code>oid</code> <code>str</code> <p>OID in numeric format, no leading dot.</p> required <p>Returns:</p> Type Description <code>ValueType</code> <p>Request result. Return type depends on requested oid.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>On invalid oid format.</p> <code>OSError</code> <p>When unable to send request.</p> <code>TimeoutError</code> <p>When timed out.</p> <code>NoSuchInstance</code> <p>When requested key is not found.</p> <code>SnmpError</code> <p>On other SNMP-related errors.</p>"},{"location":"reference/gufo/snmp/sync_client/#gufo.snmp.sync_client.SnmpSession.get_engine_id","title":"<code>get_engine_id()</code>","text":"<p>Get effective engine id.</p> <p>Returns:</p> Type Description <code>bytes</code> <p>Engine id as bytes.</p>"},{"location":"reference/gufo/snmp/sync_client/#gufo.snmp.sync_client.SnmpSession.get_many","title":"<code>get_many(oids)</code>","text":"<p>Send SNMP GET request for multiple oids and await for response.</p> <p>Parameters:</p> Name Type Description Default <code>oids</code> <code>Iterable[str]</code> <p>Iterable of oids in numeric format, no leading dots.</p> required <p>Returns:</p> Type Description <code>Dict[str, ValueType]</code> <p>Dict where keys are requested oids, values are returned values.</p> <code>Dict[str, ValueType]</code> <p>Types of values are depends on requested oids.</p> Note <p>There is no guarante that all requested oids are present in result dict. Some values may be missed if not returned by agent.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>On invalid oid format.</p> <code>OSError</code> <p>When unable to send request.</p> <code>TimeoutError</code> <p>When timed out.</p> <code>RuntimeError</code> <p>On Python runtime failure.</p> <code>SnmpError</code> <p>On other SNMP-related errors.</p>"},{"location":"reference/gufo/snmp/sync_client/#gufo.snmp.sync_client.SnmpSession.getbulk","title":"<code>getbulk(oid, max_repetitions=None)</code>","text":"<p>Iterate over oids.</p> <p>Parameters:</p> Name Type Description Default <code>oid</code> <code>str</code> <p>Starting oid</p> required <code>max_repetitions</code> <code>Optional[int]</code> <p>Maximal amount of items per response. Override the SnmpSession's defaults.</p> <code>None</code> <p>Returns:</p> Type Description <code>Iterator[Tuple[str, ValueType]]</code> <p>Asynchronous iterator yielding pair of (oid, value)</p> Example <pre><code>async for oid, value in session.getbulk(\"1.3.6\"):\n    print(oid, value)\n</code></pre>"},{"location":"reference/gufo/snmp/sync_client/#gufo.snmp.sync_client.SnmpSession.getnext","title":"<code>getnext(oid)</code>","text":"<p>Iterate over oids.</p> <p>Parameters:</p> Name Type Description Default <code>oid</code> <code>str</code> <p>Starting oid</p> required <p>Returns:</p> Type Description <code>Iterator[Tuple[str, ValueType]]</code> <p>Asynchronous iterator yielding pair of (oid, value)</p> Example <pre><code>async for oid, value in session.getnext(\"1.3.6\"):\n    print(oid, value)\n</code></pre>"},{"location":"reference/gufo/snmp/sync_client/#gufo.snmp.sync_client.SnmpSession.refresh","title":"<code>refresh()</code>","text":"<p>Send and receive REPORT to refresh authentication state.</p> <p>SNMPv3 only.</p> <p>Refresh sent automatically on entering the SnmpSession and should be resent manually if over 150 seconds left from the last request.</p>"},{"location":"reference/gufo/snmp/sync_client/client/","title":"gufo.snmp.sync_client.client","text":"<p>SyncSnmpSession implementation.</p>"},{"location":"reference/gufo/snmp/sync_client/client/#gufo.snmp.sync_client.client.SnmpSession","title":"<code>SnmpSession</code>","text":"<p>               Bases: <code>object</code></p> <p>Synchronous SNMP client session.</p> <p>Should be used either directly or via context manager.</p> <p>Parameters:</p> Name Type Description Default <code>addr</code> <code>str</code> <p>SNMP agent address, either IPv4 or IPv6.</p> required <code>port</code> <code>int</code> <p>SNMP agent port.</p> <code>161</code> <code>community</code> <code>str</code> <p>SNMP community (v1, v2c).</p> <code>'public'</code> <code>engine_id</code> <code>Optional[bytes]</code> <p>SNMP Engine id (v3).</p> <code>None</code> <code>user</code> <code>Optional[User]</code> <p>User instance (v3).</p> <code>None</code> <code>version</code> <code>Optional[SnmpVersion]</code> <p>Protocol version. Autodetect if omitted:</p> <ul> <li>v3: if <code>user</code> is set.</li> <li>v2c: otherwise.</li> </ul> <code>None</code> <code>timeout</code> <code>float</code> <p>Request timeout in seconds.</p> <code>10.0</code> <code>tos</code> <code>int</code> <p>Set ToS/DSCP mark on egress packets.</p> <code>0</code> <code>send_buffer</code> <code>int</code> <p>Send buffer size for UDP socket. 0 - use default size.</p> <code>0</code> <code>recv_buffer</code> <code>int</code> <p>Receive buffer size for UDP socket. 0 - use default size.</p> <code>0</code> <code>max_repetitions</code> <code>int</code> <p>Default max_repetitions for getbulk.</p> <code>20</code> <code>allow_bulk</code> <code>bool</code> <p>Allow using GETBULK in SnmpSession.fetch() whenever possible.</p> <code>True</code> <code>policer</code> <code>Optional[BasePolicer]</code> <p>Optional <code>BasePolicer</code> instance to limit outgoing requests. Overrides <code>limit_rps</code> parameter.</p> <code>None</code> <code>limit_rps</code> <code>Optional[Union[int, float]]</code> <p>Limit outgouing requests to <code>limit_rps</code> requests per second.</p> <code>None</code> Example <pre><code>session = SnmpSession(\"127.0.0.1\")\nr = await session.get(\"1.3.6.1.2.1.1.6.0\")\n</code></pre> Example <pre><code>async with SnmpSession(\"127.0.0.1\") as session:\n    r = await session.get(\"1.3.6.1.2.1.1.6.0\")\n</code></pre>"},{"location":"reference/gufo/snmp/sync_client/client/#gufo.snmp.sync_client.client.SnmpSession.__enter__","title":"<code>__enter__()</code>","text":"<p>Asynchronous context manager entry.</p>"},{"location":"reference/gufo/snmp/sync_client/client/#gufo.snmp.sync_client.client.SnmpSession.__exit__","title":"<code>__exit__(exc_type, exc_val, exc_tb)</code>","text":"<p>Asynchronous context manager exit.</p>"},{"location":"reference/gufo/snmp/sync_client/client/#gufo.snmp.sync_client.client.SnmpSession.fetch","title":"<code>fetch(oid)</code>","text":"<p>Iterate over oids using fastest method available.</p> <p>When SnmpSession's <code>allow_bulk</code> is set, use <code>SnmpSession.getbulk()</code> on SNMPv2, otherwise use <code>SnmpSession.getnext()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>oid</code> <code>str</code> <p>Starting oid</p> required <p>Returns:</p> Type Description <code>Iterator[Tuple[str, ValueType]]</code> <p>Asynchronous iterator yielding pair of (oid, value)</p> Example <pre><code>async for oid, value in session.fetch(\"1.3.6\"):\n    print(oid, value)\n</code></pre>"},{"location":"reference/gufo/snmp/sync_client/client/#gufo.snmp.sync_client.client.SnmpSession.get","title":"<code>get(oid)</code>","text":"<p>Send SNMP GET request and await for response.</p> <p>Parameters:</p> Name Type Description Default <code>oid</code> <code>str</code> <p>OID in numeric format, no leading dot.</p> required <p>Returns:</p> Type Description <code>ValueType</code> <p>Request result. Return type depends on requested oid.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>On invalid oid format.</p> <code>OSError</code> <p>When unable to send request.</p> <code>TimeoutError</code> <p>When timed out.</p> <code>NoSuchInstance</code> <p>When requested key is not found.</p> <code>SnmpError</code> <p>On other SNMP-related errors.</p>"},{"location":"reference/gufo/snmp/sync_client/client/#gufo.snmp.sync_client.client.SnmpSession.get_engine_id","title":"<code>get_engine_id()</code>","text":"<p>Get effective engine id.</p> <p>Returns:</p> Type Description <code>bytes</code> <p>Engine id as bytes.</p>"},{"location":"reference/gufo/snmp/sync_client/client/#gufo.snmp.sync_client.client.SnmpSession.get_many","title":"<code>get_many(oids)</code>","text":"<p>Send SNMP GET request for multiple oids and await for response.</p> <p>Parameters:</p> Name Type Description Default <code>oids</code> <code>Iterable[str]</code> <p>Iterable of oids in numeric format, no leading dots.</p> required <p>Returns:</p> Type Description <code>Dict[str, ValueType]</code> <p>Dict where keys are requested oids, values are returned values.</p> <code>Dict[str, ValueType]</code> <p>Types of values are depends on requested oids.</p> Note <p>There is no guarante that all requested oids are present in result dict. Some values may be missed if not returned by agent.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>On invalid oid format.</p> <code>OSError</code> <p>When unable to send request.</p> <code>TimeoutError</code> <p>When timed out.</p> <code>RuntimeError</code> <p>On Python runtime failure.</p> <code>SnmpError</code> <p>On other SNMP-related errors.</p>"},{"location":"reference/gufo/snmp/sync_client/client/#gufo.snmp.sync_client.client.SnmpSession.getbulk","title":"<code>getbulk(oid, max_repetitions=None)</code>","text":"<p>Iterate over oids.</p> <p>Parameters:</p> Name Type Description Default <code>oid</code> <code>str</code> <p>Starting oid</p> required <code>max_repetitions</code> <code>Optional[int]</code> <p>Maximal amount of items per response. Override the SnmpSession's defaults.</p> <code>None</code> <p>Returns:</p> Type Description <code>Iterator[Tuple[str, ValueType]]</code> <p>Asynchronous iterator yielding pair of (oid, value)</p> Example <pre><code>async for oid, value in session.getbulk(\"1.3.6\"):\n    print(oid, value)\n</code></pre>"},{"location":"reference/gufo/snmp/sync_client/client/#gufo.snmp.sync_client.client.SnmpSession.getnext","title":"<code>getnext(oid)</code>","text":"<p>Iterate over oids.</p> <p>Parameters:</p> Name Type Description Default <code>oid</code> <code>str</code> <p>Starting oid</p> required <p>Returns:</p> Type Description <code>Iterator[Tuple[str, ValueType]]</code> <p>Asynchronous iterator yielding pair of (oid, value)</p> Example <pre><code>async for oid, value in session.getnext(\"1.3.6\"):\n    print(oid, value)\n</code></pre>"},{"location":"reference/gufo/snmp/sync_client/client/#gufo.snmp.sync_client.client.SnmpSession.refresh","title":"<code>refresh()</code>","text":"<p>Send and receive REPORT to refresh authentication state.</p> <p>SNMPv3 only.</p> <p>Refresh sent automatically on entering the SnmpSession and should be resent manually if over 150 seconds left from the last request.</p>"},{"location":"reference/gufo/snmp/sync_client/getbulk/","title":"gufo.snmp.sync_client.getbulk","text":"<p>GetBulkIter iterator.</p>"},{"location":"reference/gufo/snmp/sync_client/getbulk/#gufo.snmp.sync_client.getbulk.GetBulkIter","title":"<code>GetBulkIter</code>","text":"<p>               Bases: <code>object</code></p> <p>Wrap the series of the GetBulk requests.</p> <p>Parameters:</p> Name Type Description Default <code>sock</code> <code>SnmpClientSocketProtocol</code> <p>Parent SnmpClientSocket.</p> required <code>oid</code> <code>str</code> <p>Base oid.</p> required <code>max_repetitions</code> <code>int</code> <p>Max amount of iterms per response.</p> required <code>policer</code> <code>Optional[BasePolicer]</code> <p>Optional BasePolicer instance to limit requests.</p> <code>None</code>"},{"location":"reference/gufo/snmp/sync_client/getbulk/#gufo.snmp.sync_client.getbulk.GetBulkIter.__iter__","title":"<code>__iter__()</code>","text":"<p>Return asynchronous iterator.</p>"},{"location":"reference/gufo/snmp/sync_client/getbulk/#gufo.snmp.sync_client.getbulk.GetBulkIter.__next__","title":"<code>__next__()</code>","text":"<p>Get next value.</p>"},{"location":"reference/gufo/snmp/sync_client/getnext/","title":"gufo.snmp.sync_client.getnext","text":"<p>GetNextIter iterator.</p>"},{"location":"reference/gufo/snmp/sync_client/getnext/#gufo.snmp.sync_client.getnext.GetNextIter","title":"<code>GetNextIter</code>","text":"<p>               Bases: <code>object</code></p> <p>Wrap the series of the GetNext requests.</p> <p>Parameters:</p> Name Type Description Default <code>sock</code> <code>SnmpClientSocketProtocol</code> <p>Requsting SnmpClientSocket instance.</p> required <code>oid</code> <code>str</code> <p>Base oid.</p> required <code>policer</code> <code>Optional[BasePolicer]</code> <p>Optional BasePolicer instance to limit outgoing requests.</p> <code>None</code>"},{"location":"reference/gufo/snmp/sync_client/getnext/#gufo.snmp.sync_client.getnext.GetNextIter.__iter__","title":"<code>__iter__()</code>","text":"<p>Return iterator.</p>"},{"location":"reference/gufo/snmp/sync_client/getnext/#gufo.snmp.sync_client.getnext.GetNextIter.__next__","title":"<code>__next__()</code>","text":"<p>Get next value.</p>"}]}